# -*- coding: utf-8 -*-
import sqlite3
import datetime as dt
import asyncio
import urllib
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from tgbot.data.config import PATH_DATABASE, get_admins


def _order_card(order: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    start_dt = dt.datetime.fromtimestamp(order["start_time"])
    start_str = start_dt.strftime("%d.%m %H:%M")

    fmt_map = {"hour": "–ü–æ—á–∞—Å–æ–≤–∞—è", "shift8": "–°–º–µ–Ω–∞ (8—á)", "day12": "–î–µ–Ω—å (12—á)"}
    fmt = fmt_map.get(order["format"], order["format"])

    return (
        f"üì¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"üìù {order['description']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {order['address']} ({order['district']})\n"
        f"‚è∞ –°—Ç–∞—Ä—Ç: {start_str}\n"
        f"‚öôÔ∏è –§–æ—Ä–º–∞—Ç: {fmt}\n"
        f"üë• –ú–µ—Å—Ç–∞: {order['places_taken']}/{order['places_total']}\n"
        f"üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {order['citizenship_required']}\n"
        f"‚ÑπÔ∏è –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {order['features'] or '-'}"
    )


async def _send_to_worker(
    bot: Bot, worker: dict, order: dict, kb: InlineKeyboardMarkup
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (True/False, error_msg)"""
    try:
        await bot.send_message(
            worker["telegram_id"], _order_card(order), reply_markup=kb
        )
        return True, None
    except Exception as e:
        return False, str(e)



async def _send_to_worker(
    bot: Bot, worker: dict, order: dict, kb: InlineKeyboardMarkup
):
    try:
        text = (
            f"üìã –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order['id']}\n\n"
            f"üìù {order['description']}\n"
            f"üìç {order['address']} ({order['district']})\n"
            f"‚è∞ {dt.datetime.fromtimestamp(order['start_time']).strftime('%d.%m %H:%M')}\n"
            f"üë• {order['places_taken']}/{order['places_total']} –º–µ—Å—Ç\n"
            f"üåç {order['citizenship_required']}\n"
            f"‚ÑπÔ∏è {order['features'] or '-'}"
        )
        await bot.send_message(worker["telegram_id"], text, reply_markup=kb)
        return True, None
    except Exception as e:
        return False, str(e)


async def broadcast_order(bot: Bot, order_id: int, rate_limit: int = 10):
    """
    –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏.
    –ò—Ç–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω—É: —Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, —Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫ + –ø—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫.
    """
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        order = con.execute("SELECT * FROM orders WHERE id=?", (order_id,)).fetchone()
        if not order:
            return
        order = dict(order)

        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –∑–∞–∫–∞–∑–æ–º (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ order_card_keyboard)
        query = f"–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ {order['address']} {order['district']}"
        map_url = "https://yandex.ru/maps/?text=" + urllib.parse.quote(query)

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ë–µ—Ä—É—Å—å", callback_data=f"take_order:{order['id']}:0"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                        callback_data=f"skip_order:{order['id']}:0",
                    )
                ],
                [InlineKeyboardButton(text="üó∫ –û—Ç–∫—Ä—ã—Ç—å –∞–¥—Ä–µ—Å –≤ –∫–∞—Ä—Ç–∞—Ö", url=map_url)],
            ]
        )

        # –î–æ—Å—Ç–∞—ë–º –≤—Å–µ—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
        workers = con.execute("SELECT * FROM workers WHERE status='active'").fetchall()

    success = 0
    failed = 0
    errors = []
    tasks = []

    for i, w in enumerate(workers, start=1):
        # —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤—É
        if order["citizenship_required"] == "–†–§" and w["citizenship"] != "–†–§":
            continue
        if order["citizenship_required"] == "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü" and w["citizenship"] == "–†–§":
            continue

        tasks.append(_send_to_worker(bot, dict(w), order, kb))

        # –∫–∞–∂–¥—ã–µ `rate_limit` —Å–æ–æ–±—â–µ–Ω–∏–π –∂–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É
        if i % rate_limit == 0:
            results = await asyncio.gather(*tasks)
            for ok, err in results:
                if ok:
                    success += 1
                else:
                    failed += 1
                    errors.append(err)
            tasks.clear()
            await asyncio.sleep(1)

    # –¥–æ–±–∏–≤–∞–µ–º —Ö–≤–æ—Å—Ç
    if tasks:
        results = await asyncio.gather(*tasks)
        for ok, err in results:
            if ok:
                success += 1
            else:
                failed += 1
                errors.append(err)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    admins = get_admins()
    report = (
        f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
        f"üë• –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success + failed}"
    )
    if errors:
        report += "\n\n–ü—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫:\n"
        for idx, err in enumerate(errors[:5], start=1):
            report += f"{idx}. {err}\n"

    for admin_id in admins:
        try:
            await bot.send_message(admin_id, report)
        except:
            pass
