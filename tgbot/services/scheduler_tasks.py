# -*- coding: utf-8 -*-
import sqlite3
import datetime as dt
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from tgbot.data.config import PATH_DATABASE


# ================= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ =================
def _ensure_notifications_table(con: sqlite3.Connection):
    """–¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫ (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)"""
    con.execute(
        """
        CREATE TABLE IF NOT EXISTS notifications_log(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            shift_id INTEGER NOT NULL,
            kind TEXT NOT NULL,              -- 'pre2h' | 'no_show' | 'autoping'
            sent_at INTEGER NOT NULL,
            UNIQUE(shift_id, kind)
        )
        """
    )


def _now_ts() -> int:
    return int(dt.datetime.now().timestamp())


def _format_hhmm(ts: int) -> str:
    return dt.datetime.fromtimestamp(ts).strftime("%H:%M")


def _planned_end_ts(order_start: int, fmt: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã"""
    if fmt == "shift8":
        return order_start + 8 * 3600
    if fmt == "day12":
        return order_start + 12 * 3600
    # –ü–æ—á–∞—Å–æ–≤–∞—è (–º–∏–Ω–∏–º—É–º 4 —á–∞—Å–∞)
    return order_start + 4 * 3600


# ===================== 1) –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 2 —á–∞—Å–∞ =====================
async def job_send_pre_start_reminders(bot: Bot):
    """
    –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞ –¥–æ —Å—Ç–∞—Ä—Ç–∞.
    –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã = 'accepted' –∏ –µ—â—ë –Ω–µ —Å–ª–∞–ª–∏ 'pre2h'.
    """
    now = _now_ts()
    win_from = now + 2 * 3600
    win_to = win_from + 5 * 60  # –æ–∫–Ω–æ 5 –º–∏–Ω—É—Ç

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        _ensure_notifications_table(con)

        rows = con.execute(
            """
            SELECT s.id AS shift_id, s.worker_id, w.telegram_id, o.id AS order_id,
                   o.address, o.district, o.start_time
            FROM shifts s
            JOIN workers w ON w.id = s.worker_id
            JOIN orders  o ON o.id = s.order_id
            WHERE s.status = 'accepted'
              AND o.status = 'created'
              AND o.start_time BETWEEN ? AND ?
              AND NOT EXISTS (
                    SELECT 1 FROM notifications_log nl
                    WHERE nl.shift_id = s.id AND nl.kind = 'pre2h'
              )
            """,
            (win_from, win_to),
        ).fetchall()

        for r in rows:
            try:
                text = (
                    f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–º–µ–Ω–∞ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{r['order_id']} –Ω–∞—á–Ω—ë—Ç—Å—è –≤ "
                    f"{_format_hhmm(r['start_time'])}.\n"
                    f"üìç –ê–¥—Ä–µ—Å: {r['address']} ({r['district']}).\n"
                    f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–±—ã—Ç–∏–µ –∫–Ω–æ–ø–∫–æ–π ¬´üìç –Ø –Ω–∞ –º–µ—Å—Ç–µ¬ª."
                )
                await bot.send_message(r["telegram_id"], text)
                con.execute(
                    "INSERT OR IGNORE INTO notifications_log (shift_id, kind, sent_at) VALUES (?, 'pre2h', ?)",
                    (r["shift_id"], now),
                )
                con.commit()
            except Exception:
                pass


# --- NEW: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –º–æ–º–µ–Ω—Ç —Å—Ç–∞—Ä—Ç–∞ ---
async def job_notify_on_start(bot: Bot):
    now = _now_ts()
    # –æ–∫–Ω–æ "–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å" 5 –º–∏–Ω
    win_from = now
    win_to = now + 5 * 60

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        _ensure_notifications_table(con)

        rows = con.execute(
            """
            SELECT s.id AS shift_id, s.worker_id, w.telegram_id, o.id AS order_id, o.start_time
            FROM shifts s
            JOIN workers w ON w.id = s.worker_id
            JOIN orders  o ON o.id = s.order_id
            WHERE s.status = 'accepted'
              AND o.status IN ('created','started')
              AND o.start_time BETWEEN ? AND ?
              AND NOT EXISTS (
                    SELECT 1 FROM notifications_log nl
                    WHERE nl.shift_id = s.id AND nl.kind = 'start_now'
              )
            """,
            (win_from, win_to),
        ).fetchall()

        for r in rows:
            try:
                await bot.send_message(
                    r["telegram_id"],
                    "üö¶ –°–º–µ–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏–±—ã—Ç–∏–µ ‚Äî ‚Äúüìç –Ø –Ω–∞ –º–µ—Å—Ç–µ‚Äù.",
                )
                con.execute(
                    "INSERT OR IGNORE INTO notifications_log (shift_id, kind, sent_at) VALUES (?, 'start_now', ?)",
                    (r["shift_id"], now),
                )
                con.commit()
            except Exception:
                pass


# --- NEW: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ —Å—Ç–∞—Ä—Ç–∞ ---
async def job_send_30min_reminders(bot: Bot):
    now = _now_ts()
    win_from = now + 30 * 60
    win_to = win_from + 5 * 60  # –æ–∫–Ω–æ 5 –º–∏–Ω—É—Ç

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        _ensure_notifications_table(con)

        rows = con.execute(
            """
            SELECT s.id AS shift_id, s.worker_id, w.telegram_id, o.id AS order_id,
                   o.address, o.district, o.start_time
            FROM shifts s
            JOIN workers w ON w.id = s.worker_id
            JOIN orders  o ON o.id = s.order_id
            WHERE s.status = 'accepted'
              AND o.status = 'created'
              AND o.start_time BETWEEN ? AND ?
              AND NOT EXISTS (
                    SELECT 1 FROM notifications_log nl
                    WHERE nl.shift_id = s.id AND nl.kind = 'pre30m'
              )
            """,
            (win_from, win_to),
        ).fetchall()

        for r in rows:
            try:
                text = "‚è≥ –°–∫–æ—Ä–æ —Å—Ç–∞—Ä—Ç! –ù–∞–∂–º–∏—Ç–µ ‚Äúüìç –Ø –Ω–∞ –º–µ—Å—Ç–µ‚Äù, –∫–æ–≥–¥–∞ –ø—Ä–∏–±—É–¥–µ—Ç–µ."
                await bot.send_message(r["telegram_id"], text)
                con.execute(
                    "INSERT OR IGNORE INTO notifications_log (shift_id, kind, sent_at) VALUES (?, 'pre30m', ?)",
                    (r["shift_id"], now),
                )
                con.commit()
            except Exception:
                pass


# ===================== 2) –ù–µ—è–≤–∫–∏ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç =====================
async def job_mark_no_shows_and_penalize(bot: Bot):
    """
    –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 15+ –º–∏–Ω—É—Ç –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã 'accepted',
    —Ç–æ –ø–æ–º–µ—á–∞–µ–º 'no_show', —Ä–µ–π—Ç–∏–Ω–≥ -1.0, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ 7 –¥–Ω–µ–π.
    """
    now = _now_ts()
    threshold = now - 15 * 60

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        _ensure_notifications_table(con)

        rows = con.execute(
            """
            SELECT s.id AS shift_id, s.worker_id, w.telegram_id,
                   o.id AS order_id, o.start_time
            FROM shifts s
            JOIN workers w ON w.id = s.worker_id
            JOIN orders  o ON o.id = s.order_id
            WHERE s.status = 'accepted'
              AND o.start_time <= ?
              AND NOT EXISTS (
                    SELECT 1 FROM notifications_log nl
                    WHERE nl.shift_id = s.id AND nl.kind = 'no_show'
              )
            """,
            (threshold,),
        ).fetchall()

        for r in rows:
            try:
                con.execute(
                    "UPDATE shifts SET status='no_show' WHERE id=?", (r["shift_id"],)
                )
                con.execute(
                    "UPDATE workers SET rating = rating - 1.0, blocked_until = ? WHERE id=?",
                    (now + 7 * 86400, r["worker_id"]),
                )
                con.execute(
                    "INSERT OR IGNORE INTO notifications_log (shift_id, kind, sent_at) VALUES (?, 'no_show', ?)",
                    (r["shift_id"], now),
                )
                con.commit()

                await bot.send_message(
                    r["telegram_id"],
                    "‚ùå –í—ã –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –Ω–∞ —Å–º–µ–Ω–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞.\n"
                    "–°—Ç–∞—Ç—É—Å: –Ω–µ —è–≤–∏–ª—Å—è.\n"
                    "–†–µ–π—Ç–∏–Ω–≥ —Å–Ω–∏–∂–µ–Ω –Ω–∞ 1.0, –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 7 –¥–Ω–µ–π.",
                )
            except Exception:
                pass


# ===================== 3) –ê–≤—Ç–æ–ø–∏–Ω–≥ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è =====================
async def job_autoping_after_end(bot: Bot):
    """
    –ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã
    —à–ª—ë–º –∞–≤—Ç–æ–ø–∏–Ω–≥, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å = 'accepted' –∏–ª–∏ 'arrived'.
    """
    now = _now_ts()

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        _ensure_notifications_table(con)

        rows = con.execute(
            """
            SELECT s.id AS shift_id, s.worker_id, w.telegram_id,
                   o.id AS order_id, o.start_time, o.format, o.address, o.district
            FROM shifts s
            JOIN workers w ON w.id = s.worker_id
            JOIN orders  o ON o.id = s.order_id
            WHERE s.status IN ('accepted','arrived')
              AND o.status IN ('created','started')
            """
        ).fetchall()

        for r in rows:
            end_ts = _planned_end_ts(r["start_time"], r["format"])
            if now < end_ts + 30 * 60:
                continue

            exists = con.execute(
                "SELECT 1 FROM notifications_log WHERE shift_id=? AND kind='autoping' LIMIT 1",
                (r["shift_id"],),
            ).fetchone()
            if exists:
                continue

            try:
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚úÖ –û—Ç—Ä–∞–±–æ—Ç–∞–ª",
                                callback_data=f"shift_done:{r['shift_id']}",
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚è≥ –ï—â—ë —Ä–∞–±–æ—Ç–∞—é",
                                callback_data=f"shift_still:{r['shift_id']}",
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞",
                                callback_data=f"shift_issue:{r['shift_id']}",
                            )
                        ],
                    ]
                )
                text = (
                    f"‚è≥ –°–º–µ–Ω–∞ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{r['order_id']} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å.\n"
                    f"üìç –ê–¥—Ä–µ—Å: {r['address']} ({r['district']}).\n"
                    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:"
                )
                await bot.send_message(r["telegram_id"], text, reply_markup=kb)

                con.execute(
                    "INSERT OR IGNORE INTO notifications_log (shift_id, kind, sent_at) VALUES (?, 'autoping', ?)",
                    (r["shift_id"], now),
                )
                con.commit()
            except Exception:
                pass
