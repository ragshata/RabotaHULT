# -*- coding: utf-8 -*-
import sqlite3
import datetime
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery
from tgbot.data.config import PATH_DATABASE, get_admins
from tgbot.services.broadcast import broadcast_order

router = Router()


# ================= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ =================
def add_transaction(worker_id: int, order_id: int, amount: float):
    now = int(datetime.datetime.now().timestamp())
    with sqlite3.connect(PATH_DATABASE) as con:
        con.execute(
            "INSERT INTO transactions (worker_id, order_id, amount, status, created_at) VALUES (?, ?, ?, 'unpaid', ?)",
            (worker_id, order_id, amount, now),
        )
        con.commit()


def update_rating(
    user_id: int, delta: float, block_days: int = 0, cooldown_hours: int = 0
):
    now = int(datetime.datetime.now().timestamp())
    with sqlite3.connect(PATH_DATABASE) as con:
        cur = con.cursor()
        cur.execute(
            "UPDATE workers SET rating = rating + ? WHERE telegram_id=?",
            (delta, user_id),
        )
        if block_days > 0:
            cur.execute(
                "UPDATE workers SET blocked_until=? WHERE telegram_id=?",
                (now + block_days * 86400, user_id),
            )
        if cooldown_hours > 0:
            cur.execute(
                "UPDATE workers SET cooldown_until=? WHERE telegram_id=?",
                (now + cooldown_hours * 3600, user_id),
            )
        con.commit()


# ================= –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ =================
# üìç –Ø –Ω–∞ –º–µ—Å—Ç–µ
@router.callback_query(F.data.startswith("shift_arrive:"))
async def mark_arrive(callback: CallbackQuery):
    shift_id = int(callback.data.split(":")[1])
    now = int(datetime.datetime.now().timestamp())

    with sqlite3.connect(PATH_DATABASE) as con:
        cur = con.cursor()
        cur.execute(
            "UPDATE shifts SET status='arrived', start_time=? WHERE id=?",
            (now, shift_id),
        )
        cur.execute("SELECT order_id FROM shifts WHERE id=?", (shift_id,))
        order_id = cur.fetchone()[0]
        cur.execute(
            "SELECT COUNT(*) FROM shifts WHERE order_id=? AND status='arrived'",
            (order_id,),
        )
        if cur.fetchone()[0] == 1:
            cur.execute("UPDATE orders SET status='started' WHERE id=?", (order_id,))
        con.commit()

    await callback.answer("üìç –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –∫–∞–∫ '–Ω–∞ –º–µ—Å—Ç–µ'.", show_alert=True)
    await callback.message.edit_text(
        "–°—Ç–∞—Ç—É—Å: –ø—Ä–∏–±—ã–ª\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å ‚úÖ –û—Ç—Ä–∞–±–æ—Ç–∞–ª –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏."
    )


# ‚úÖ –û—Ç—Ä–∞–±–æ—Ç–∞–ª
@router.callback_query(F.data.startswith("shift_done:"))
async def mark_done(callback: CallbackQuery):
    shift_id = int(callback.data.split(":")[1])
    now = int(datetime.datetime.now().timestamp())

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        cur = con.cursor()
        s = cur.execute("SELECT * FROM shifts WHERE id=?", (shift_id,)).fetchone()
        o = cur.execute("SELECT * FROM orders WHERE id=?", (s["order_id"],)).fetchone()

        amount = 0
        note = ""

        if o["format"] == "hour":
            start = s["start_time"]
            hours = max(4, (now - start) // 3600 + 1)
            amount = hours * 400
            note = f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: 400 ‚ÇΩ √ó {hours} —á = {amount} ‚ÇΩ"
        elif o["format"] == "shift8":
            amount = 3500
            note = "–ù–∞—á–∏—Å–ª–µ–Ω–æ: 3500 ‚ÇΩ –∑–∞ —Å–º–µ–Ω—É."
        else:
            amount = 4800
            note = "–ù–∞—á–∏—Å–ª–µ–Ω–æ: 4800 ‚ÇΩ –∑–∞ –¥–µ–Ω—å."

        add_transaction(s["worker_id"], o["id"], amount)
        cur.execute(
            "UPDATE shifts SET status='done', end_time=? WHERE id=?", (now, shift_id)
        )
        con.commit()

    await callback.answer("‚úÖ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
    await callback.message.edit_text(note + "\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ üí∞ –ë–∞–ª–∞–Ω—Å.")


# ‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è
@router.callback_query(F.data.startswith("shift_cancel:"))
async def cancel_shift(callback: CallbackQuery, bot: Bot):
    shift_id = int(callback.data.split(":")[1])
    now = int(datetime.datetime.now().timestamp())
    user_id = callback.from_user.id

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        cur = con.cursor()

        # —Ç—è–Ω–µ–º —Å–º–µ–Ω—É + –∑–∞–∫–∞–∑
        s_row = cur.execute("SELECT * FROM shifts WHERE id=?", (shift_id,)).fetchone()
        if not s_row:
            await callback.answer("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        s = dict(s_row)

        o_row = cur.execute(
            "SELECT * FROM orders WHERE id=?", (s["order_id"],)
        ).fetchone()
        if not o_row:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        o = dict(o_row)

        # –Ω–µ–ª—å–∑—è –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        if now >= o["start_time"]:
            await callback.answer(
                "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã.", show_alert=True
            )
            return

        # —à—Ç—Ä–∞—Ñ: <=2—á –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ ‚Äî -0.1, –ø–æ–∑–∂–µ ‚Äî -0.5
        accepted_at = s.get("accepted_at") or 0
        penalty = -0.1 if (now - accepted_at) <= 2 * 3600 else -0.5

        # –±—ã–ª –ª–∏ –∑–∞–∫–∞–∑ —É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω –¥–æ –æ—Ç–∫–∞–∑–∞?
        was_full = o["places_taken"] >= o["places_total"]

        # –ø—Ä–∏–º–µ–Ω—è–µ–º
        cur.execute("UPDATE shifts SET status='cancelled' WHERE id=?", (shift_id,))
        cur.execute(
            "UPDATE workers SET rating = rating + ? WHERE id=?",
            (penalty, s["worker_id"]),
        )
        cur.execute(
            "UPDATE orders SET places_taken = CASE WHEN places_taken>0 THEN places_taken-1 ELSE 0 END WHERE id=?",
            (o["id"],),
        )
        con.commit()

    # –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    msg = (
        "‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–º–µ–Ω—ã. –†–µ–π—Ç–∏–Ω–≥ —Å–Ω–∏–∂–µ–Ω –Ω–∞ 0.1."
        if penalty == -0.1
        else "‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–º–µ–Ω—ã. –†–µ–π—Ç–∏–Ω–≥ —Å–Ω–∏–∂–µ–Ω –Ω–∞ 0.5. –í–æ–∑–º–æ–∂–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è."
    )
    await callback.answer(msg, show_alert=True)
    await callback.message.edit_text("–°–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    # === —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º ===
    admin_text = (
        f"‚ö†Ô∏è <b>–û—Ç–∫–∞–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</b>\n\n"
        f"üë∑ <b>Worker ID:</b> {s['worker_id']}\n"
    )

    # –¥–æ—Å—Ç–∞–Ω–µ–º –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        worker = con.execute(
            "SELECT name, phone FROM workers WHERE id=?", (s["worker_id"],)
        ).fetchone()

    if worker:
        admin_text += f"üë§ <b>–ò–º—è:</b> {worker['name']}\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {worker['phone']}\n\n"

    admin_text += (
        f"üì¶ <b>–ó–∞–∫–∞–∑ #{s['order_id']}</b>\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {s.get('description','‚Äî')}\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {s.get('address','‚Äî')} ({s.get('district','‚Äî')})\n"
        f"üïí <b>–ù–∞—á–∞–ª–æ:</b> {datetime.datetime.fromtimestamp(s['start_time']).strftime('%d.%m %H:%M')}\n"
        f"üîª <b>–®—Ç—Ä–∞—Ñ:</b> {penalty}"
    )

    for admin_id in get_admins():
        try:
            await bot.send_message(admin_id, admin_text)
        except Exception:
            pass

    # –∞–≤—Ç–æ–¥–æ–±–æ—Ä, –µ—Å–ª–∏ –±—ã–ª–æ —É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–æ
    if was_full:
        try:
            await broadcast_order(bot, o["id"])
        except Exception:
            pass


# ================= –ê–≤—Ç–æ–ø–æ–º–µ—Ç–∫–∞ "–ù–µ—è–≤–∫–∞" =================
async def job_mark_no_shows_and_penalize(bot: Bot):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ scheduler –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç ‚Äî –ø–æ–º–µ—á–∞–µ—Ç –Ω–µ—è–≤–∏–≤—à–∏—Ö—Å—è —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞"""
    now = int(datetime.datetime.now().timestamp())
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        cur = con.cursor()

        # –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –Ω–∞—á–∞—Ç—å—Å—è >15 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥, –Ω–æ –±–µ–∑ "arrived"
        shifts = cur.execute(
            """
            SELECT s.*, w.telegram_id
            FROM shifts s
            JOIN workers w ON s.worker_id=w.id
            JOIN orders o ON s.order_id=o.id
            WHERE s.status='accepted' AND o.start_time < ? - 900
            """,
            (now,),
        ).fetchall()

        for s in shifts:
            cur.execute("UPDATE shifts SET status='cancelled' WHERE id=?", (s["id"],))
            update_rating(s["telegram_id"], -1.0, block_days=7)

            try:
                await bot.send_message(
                    s["telegram_id"],
                    "‚ùå –í—ã –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –≤ –∑–∞–∫–∞–∑–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞.\n"
                    "–°—Ç–∞—Ç—É—Å: –Ω–µ —è–≤–∏–ª—Å—è.\n"
                    "–†–µ–π—Ç–∏–Ω–≥ ‚àí1.0, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ 7 –¥–Ω–µ–π.",
                )
            except Exception:
                pass

        con.commit()
