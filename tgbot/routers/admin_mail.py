# -*- coding: utf-8 -*-
import asyncio
import sqlite3
from aiogram import Router, F, types, Bot
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from tgbot.data.config import PATH_DATABASE, get_admins

router = Router()


# =================== –°–æ—Å—Ç–æ—è–Ω–∏—è ===================
class Broadcast(StatesGroup):
    waiting = State()


# =================== –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ ===================
@router.message(F.text == "üì£ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: types.Message, state):
    await state.set_state(Broadcast.waiting)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")]
        ]
    )

    await message.answer(
        "üì£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî "
        "—è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤).",
        reply_markup=kb,
    )


# =================== –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ===================
@router.callback_query(F.data == "broadcast_cancel")
async def broadcast_cancel(callback: types.CallbackQuery, state):
    await state.clear()
    await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


# =================== –ü—Ä–∏—ë–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ ===================
@router.message(Broadcast.waiting)
async def handle_broadcast(message: types.Message, state, bot: Bot):
    # --- –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        rows = con.execute(
            "SELECT telegram_id FROM workers WHERE status='active' AND telegram_id IS NOT NULL"
        ).fetchall()

    recipients = [r["telegram_id"] for r in rows if r["telegram_id"]]

    # –∏—Å–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
    admin_ids = set(get_admins())
    recipients = [uid for uid in recipients if uid not in admin_ids]

    if not recipients:
        await state.clear()
        await message.answer("‚ùóÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    # --- —Ä–∞—Å—Å—ã–ª–∞–µ–º –ø–∞–∫–µ—Ç–∞–º–∏ ---
    success = 0
    failed = 0
    errors = []
    rate_limit = 20  # –Ω–µ –±–æ–ª–µ–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É

    for i, uid in enumerate(recipients, start=1):
        try:
            await message.copy_to(chat_id=uid)
            success += 1
        except Exception as e:
            failed += 1
            errors.append(str(e))

        if i % rate_limit == 0:
            await asyncio.sleep(1)

    await state.clear()

    # --- –æ—Ç—á—ë—Ç ---
    report = (
        "üì£ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
        f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: <b>{success}</b>\n"
        f"‚ùå –û—à–∏–±–æ–∫: <b>{failed}</b>\n"
        f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: <b>{len(recipients)}</b>"
    )
    if errors:
        report += "\n\n<b>–ü—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫:</b>\n" + "\n".join(
            f"‚Äî {e}" for e in errors[:5]
        )

    await message.answer(report, parse_mode="HTML")
