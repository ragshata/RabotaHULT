# -*- coding: utf-8 -*-
import sqlite3
import datetime as dt
import aiohttp
from aiogram import Bot, Router, F, types
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove,
)

from tgbot.data.config import PATH_DATABASE
from tgbot.routers.admin_panel import admin_menu
from tgbot.services.broadcast import broadcast_order
from tgbot.services.tz import TZ
from tgbot.utils.const_functions import format_display
from tgbot.utils.misc.bot_filters import IsAdmin

router = Router()
router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())


# ================= FSM =================
class CreateOrder(StatesGroup):
    client_name = State()
    client_phone = State()
    description = State()
    address = State()
    district = State()
    start_time = State()
    places_total = State()
    format = State()
    citizenship = State()
    features = State()
    confirm = State()
    edit_field = State()


# ================= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ =================
VALID_DISTRICTS = [
    "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π",
    "–í–µ—Ä—Ö-–ò—Å–µ—Ç—Å–∫–∏–π",
    "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π",
    "–ö–∏—Ä–æ–≤—Å–∫–∏–π",
    "–õ–µ–Ω–∏–Ω—Å–∫–∏–π",
    "–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π",
    "–û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ–≤—Å–∫–∏–π",
    "–ß–∫–∞–ª–æ–≤—Å–∫–∏–π",
]


def insert_order(data: dict) -> int:
    with sqlite3.connect(PATH_DATABASE) as con:
        cur = con.cursor()
        cur.execute(
            """
            INSERT INTO orders
            (client_name, client_phone, description, address, district,
             start_time, format, citizenship_required, places_total,
             places_taken, features, status)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, 'created')
            """,
            (
                data["client_name"],
                data["client_phone"],
                data["description"],
                data["address"],
                data["district"],
                data["start_time"],
                data["format"],
                data["citizenship"],
                data["places_total"],
                data["features"],
            ),
        )
        order_id = cur.lastrowid
        con.commit()
        return order_id


def format_order_card(data: dict, order_id: int) -> str:
    return (
        f"üì¶ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞ (ID {order_id})\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {data['client_name']} ({data['client_phone']})\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {data['address']} ({data['district']})\n"
        f"‚è∞ –°—Ç–∞—Ä—Ç: {dt.datetime.fromtimestamp(data['start_time'], TZ).strftime('%d.%m %H:%M')}\n"
        f"‚öôÔ∏è <b>–§–æ—Ä–º–∞—Ç:</b> {format_display(['format'])}\n"
        f"üë• –ú–µ—Å—Ç–∞: {data['places_total']}\n"
        f"üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {data['citizenship']}\n"
        f"‚ÑπÔ∏è –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {data['features']}"
    )


def preview_keyboard(order_id: int = 0):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"
                ),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order"),
            ],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_order")],
        ]
    )


# ================= –•—ç–Ω–¥–ª–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è =================
@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
async def start_create_order(message: types.Message, state):
    await state.set_state(CreateOrder.client_name)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_order_cancel")]
        ]
    )
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=kb)


# –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ¬ª (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ª—é–±–æ–º —à–∞–≥–µ –º–∞—Å—Ç–µ—Ä–∞)
@router.callback_query(F.data == "create_order_cancel")
async def create_order_cancel(callback: types.CallbackQuery, state):
    await state.clear()
    try:
        await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    except Exception:
        # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏) ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
        await callback.message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()


@router.message(CreateOrder.client_name)
async def step_client_name(message: types.Message, state):
    await state.update_data(client_name=message.text.strip())
    await state.set_state(CreateOrder.client_phone)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:")


@router.message(CreateOrder.client_phone)
async def step_client_phone(message: types.Message, state):
    await state.update_data(client_phone=message.text.strip())
    await state.set_state(CreateOrder.description)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:")


@router.message(CreateOrder.description)
async def step_description(message: types.Message, state):
    await state.update_data(description=message.text.strip())
    await state.set_state(CreateOrder.address)
    await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (—Ç–µ–∫—Å—Ç–æ–º) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:")


# --- –ê–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º ---
@router.message(CreateOrder.address, F.text)
async def step_address_text(message: types.Message, state):
    street = message.text.strip()
    if not street.lower().startswith("—É–ª"):
        street = f"—É–ª. {street}"

    await state.update_data(address=street)
    await state.set_state(CreateOrder.district)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=d, callback_data=f"district:{d}")]
            for d in VALID_DISTRICTS
        ]
    )
    await message.answer(
        f"üìç –£–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å: {street}\n\nüèô –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=kb
    )


# --- –ê–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –ª–æ–∫–∞—Ü–∏—é ---
@router.message(CreateOrder.address, F.location)
async def step_address_location(message: types.Message, state):
    lat = message.location.latitude
    lon = message.location.longitude

    try:
        url = f"https://nominatim.openstreetmap.org/reverse?lat={lat}&lon={lon}&format=json&accept-language=ru"
        async with aiohttp.ClientSession() as session:
            async with session.get(
                url, headers={"User-Agent": "RabotaPlusBot"}
            ) as resp:
                data = await resp.json()
                addr = data.get("address", {})

                road = addr.get("road", "")
                house = addr.get("house_number", "")
                street = f"—É–ª. {road} {house}".strip() if road else "–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"

                district_guess = addr.get("suburb") or addr.get("city_district") or ""
    except Exception:
        street = "–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
        district_guess = ""

    await state.update_data(address=street)

    if district_guess and any(district_guess.startswith(d) for d in VALID_DISTRICTS):
        chosen_district = next(
            d for d in VALID_DISTRICTS if district_guess.startswith(d)
        )
        await state.update_data(district=chosen_district)
        await state.set_state(CreateOrder.start_time)
        await message.answer(
            f"üìç –û–ø—Ä–µ–¥–µ–ª—ë–Ω –∞–¥—Ä–µ—Å: <b>{street}</b>\n"
            f"üèô –†–∞–π–æ–Ω: <b>{chosen_district}</b>\n\n"
            f"‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç: 15.09 09:00):",
            parse_mode="HTML",
        )
    else:
        await state.set_state(CreateOrder.district)
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=d, callback_data=f"district:{d}")]
                for d in VALID_DISTRICTS
            ]
        )
        await message.answer(
            f"üìç –û–ø—Ä–µ–¥–µ–ª—ë–Ω –∞–¥—Ä–µ—Å: <b>{street}</b>\n\nüèô –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
            reply_markup=kb,
            parse_mode="HTML",
        )


@router.callback_query(F.data.startswith("district:"))
async def step_district(callback: types.CallbackQuery, state):
    district = callback.data.split(":", 1)[1]
    await state.update_data(district=district)
    await state.set_state(CreateOrder.start_time)

    await callback.message.answer(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç: 15.09 09:00):",
        reply_markup=ReplyKeyboardRemove(),
    )
    await callback.answer()


# === –í–†–ï–ú–Ø –°–¢–ê–†–¢–ê ===
@router.message(CreateOrder.start_time)
async def step_start_time(message: types.Message, state):
    try:
        dt_obj = dt.datetime.strptime(message.text.strip(), "%d.%m %H:%M")
        dt_obj = dt_obj.replace(year=dt.datetime.now().year)
        start_ts = int(dt_obj.timestamp())
    except Exception:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫: 15.09 09:00")
        return

    await state.update_data(start_time=start_ts)
    await state.set_state(CreateOrder.places_total)
    await message.answer("üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ (1‚Äì20):")


# === –ö–û–õ–ò–ß–ï–°–¢–í–û ===
@router.message(CreateOrder.places_total)
async def step_places_total(message: types.Message, state):
    try:
        n = int(message.text.strip())
        if not 1 <= n <= 20:
            raise ValueError
    except Exception:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20.")
        return

    await state.update_data(places_total=n)
    await state.set_state(CreateOrder.format)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚è± –ü–æ—á–∞—Å–æ–≤–∞—è", callback_data="format:hour"),
                InlineKeyboardButton(
                    text="üïó –°–º–µ–Ω–∞ (8—á)", callback_data="format:shift8"
                ),
            ],
            [InlineKeyboardButton(text="üìÖ –î–µ–Ω—å (12—á)", callback_data="format:day12")],
        ]
    )
    await message.answer("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=kb)


# === –§–û–†–ú–ê–¢ ===
@router.callback_query(F.data.startswith("format:"))
async def step_format(callback: types.CallbackQuery, state):
    fmt = callback.data.split(":", 1)[1]
    await state.update_data(format=fmt)
    await state.set_state(CreateOrder.citizenship)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üá∑üá∫ –†–§", callback_data="citizenship:–†–§"),
                InlineKeyboardButton(
                    text="üåç –ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü", callback_data="citizenship:–ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü"
                ),
            ],
            [InlineKeyboardButton(text="ü§ù –õ—é–±–æ–µ", callback_data="citizenship:–õ—é–±–æ–µ")],
        ]
    )
    await callback.message.answer("üåç –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤—É:", reply_markup=kb)
    await callback.answer()


# === –ì–†–ê–ñ–î–ê–ù–°–¢–í–û ===
@router.callback_query(F.data.startswith("citizenship:"))
async def step_citizenship(callback: types.CallbackQuery, state):
    val = callback.data.split(":", 1)[1]
    await state.update_data(citizenship=val)
    await state.set_state(CreateOrder.features)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="features:none")]
        ]
    )
    await callback.message.answer(
        "‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–∏–ª–∏ ¬´–ù–µ—Ç¬ª):", reply_markup=kb
    )
    await callback.answer()


# === –û–°–û–ë–ï–ù–ù–û–°–¢–ò ===
@router.callback_query(F.data == "features:none")
async def features_none(callback: types.CallbackQuery, state):
    await state.update_data(features="–Ω–µ—Ç")
    data = await state.get_data()

    preview = format_order_card(data, order_id=0)
    await state.set_state(CreateOrder.confirm)
    await callback.message.edit_text(preview, reply_markup=preview_keyboard())
    await callback.answer("–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –Ω–µ—Ç")


@router.message(CreateOrder.features)
async def step_features(message: types.Message, state):
    await state.update_data(features=message.text.strip())
    data = await state.get_data()

    preview = format_order_card(data, order_id=0)
    await state.set_state(CreateOrder.confirm)
    await message.answer(preview, reply_markup=preview_keyboard())


# === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ===
@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: types.CallbackQuery, state):
    data = await state.get_data()
    order_id = insert_order(data)
    await state.clear()

    text = format_order_card(data, order_id)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –†–∞—Å—Å—ã–ª–∫–∞", callback_data=f"admin_broadcast:{order_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"admin_edit_order:{order_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_cancel_order:{order_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_order:{order_id}"
                )
            ],
        ]
    )

    await callback.message.edit_text(text, reply_markup=kb)
    await callback.answer("‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    await callback.message.answer("üìã –ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_menu())


# === –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: —à–∞–≥ 1 ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ===
@router.callback_query(F.data.startswith("admin_delete_order:"))
async def admin_delete_order_confirm(callback: types.CallbackQuery):
    order_id = int(callback.data.split(":")[1])

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                    callback_data=f"admin_delete_order_yes:{order_id}",
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"admin_order:{order_id}"
                )
            ],
        ]
    )
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ <b>—É–¥–∞–ª–∏—Ç—å</b> –∑–∞–∫–∞–∑ #{order_id}? "
        f"–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ: –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∑–∞–∫–∞–∑—É.",
        reply_markup=kb,
        parse_mode="HTML",
    )
    await callback.answer()


# === –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: —à–∞–≥ 2 ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ===
@router.callback_query(F.data.startswith("admin_delete_order_yes:"))
async def admin_delete_order_yes(callback: types.CallbackQuery):
    order_id = int(callback.data.split(":")[1])

    with sqlite3.connect(PATH_DATABASE) as con:
        cur = con.cursor()
        # –ß–∏—Å—Ç–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–µ—Å–ª–∏ –∫–∞—Å–∫–∞–¥–∞ –Ω–µ—Ç)
        cur.execute("DELETE FROM transactions   WHERE order_id=?", (order_id,))
        cur.execute("DELETE FROM skipped_orders WHERE order_id=?", (order_id,))
        cur.execute("DELETE FROM shifts         WHERE order_id=?", (order_id,))
        # –°–∞–º –∑–∞–∫–∞–∑
        cur.execute("DELETE FROM orders         WHERE id=?", (order_id,))
        con.commit()

    await callback.message.edit_text(f"üóë –ó–∞–∫–∞–∑ #{order_id} —É–¥–∞–ª—ë–Ω.")
    await callback.answer("–ì–æ—Ç–æ–≤–æ.")
    # –í–µ—Ä–Ω—ë–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    await callback.message.answer("üìã –ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_menu())


# === –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ ===
@router.callback_query(F.data.startswith("admin_broadcast:"))
async def admin_broadcast(callback: types.CallbackQuery, bot: Bot):
    order_id = int(callback.data.split(":")[1])
    await broadcast_order(bot, order_id)
    await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞", show_alert=True)


# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ===
@router.callback_query(F.data == "edit_order")
async def start_edit_order(callback: types.CallbackQuery, state):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"""
    data = await state.get_data()

    if not data:
        await callback.answer("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üë§ –ö–ª–∏–µ–Ω—Ç", callback_data="edit_field:client_name"
                ),
                InlineKeyboardButton(
                    text="üìû –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_field:client_phone"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field:description"
                ),
                InlineKeyboardButton(
                    text="üìç –ê–¥—Ä–µ—Å", callback_data="edit_field:address"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üèô –†–∞–π–æ–Ω", callback_data="edit_field:district"
                ),
                InlineKeyboardButton(
                    text="‚è∞ –í—Ä–µ–º—è", callback_data="edit_field:start_time"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üë• –ö–æ–ª-–≤–æ –º–µ—Å—Ç", callback_data="edit_field:places_total"
                ),
                InlineKeyboardButton(
                    text="‚öôÔ∏è –§–æ—Ä–º–∞—Ç", callback_data="edit_field:format"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ", callback_data="edit_field:citizenship"
                ),
                InlineKeyboardButton(
                    text="‚ÑπÔ∏è –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏", callback_data="edit_field:features"
                ),
            ],
            [
                InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="confirm_order"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_order"),
            ],
        ]
    )

    await callback.message.edit_text("‚úèÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb)
    await callback.answer()


# === –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è ===
@router.callback_query(F.data.startswith("edit_field:"))
async def choose_field_to_edit(callback: types.CallbackQuery, state):
    field = callback.data.split(":")[1]
    await state.update_data(edit_field=field)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
    if field == "format":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚è± –ü–æ—á–∞—Å–æ–≤–∞—è", callback_data="set_format:hour"
                    ),
                    InlineKeyboardButton(
                        text="üïó –°–º–µ–Ω–∞ (8—á)", callback_data="set_format:shift8"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üìÖ –î–µ–Ω—å (12—á)", callback_data="set_format:day12"
                    )
                ],
            ]
        )
        await callback.message.edit_text("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç:", reply_markup=kb)

    elif field == "citizenship":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üá∑üá∫ –†–§", callback_data="set_citizenship:–†–§"
                    ),
                    InlineKeyboardButton(
                        text="üåç –ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü", callback_data="set_citizenship:–ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="ü§ù –õ—é–±–æ–µ", callback_data="set_citizenship:–õ—é–±–æ–µ"
                    )
                ],
            ]
        )
        await callback.message.edit_text(
            "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:", reply_markup=kb
        )

    elif field == "places_total":
        await callback.message.edit_text(
            "üë• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ (1‚Äì20):"
        )
        await state.set_state(CreateOrder.edit_field)
        return

    else:
        prompts = {
            "client_name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:",
            "client_phone": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:",
            "description": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:",
            "address": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:",
            "district": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–π–æ–Ω:",
            "start_time": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.09 09:00):",
            "features": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (–∏–ª–∏ '–Ω–µ—Ç'):",
        }
        await callback.message.edit_text(prompts.get(field, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"))
        await state.set_state(CreateOrder.edit_field)

    await callback.answer()


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç –∏ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ ===
@router.callback_query(F.data.startswith("set_format:"))
async def set_format(callback: types.CallbackQuery, state):
    fmt = callback.data.split(":")[1]
    await state.update_data(format=fmt)
    preview = format_order_card(await state.get_data(), order_id=0)
    await callback.message.edit_text(
        f"‚úÖ –§–æ—Ä–º–∞—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.\n\n{preview}", reply_markup=preview_keyboard()
    )
    await state.set_state(CreateOrder.confirm)
    await callback.answer()


@router.callback_query(F.data.startswith("set_citizenship:"))
async def set_citizenship(callback: types.CallbackQuery, state):
    val = callback.data.split(":")[1]
    await state.update_data(citizenship=val)
    preview = format_order_card(await state.get_data(), order_id=0)
    await callback.message.edit_text(
        f"‚úÖ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.\n\n{preview}", reply_markup=preview_keyboard()
    )
    await state.set_state(CreateOrder.confirm)
    await callback.answer()


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é ===
@router.message(CreateOrder.edit_field)
async def save_edited_field(message: types.Message, state):
    data = await state.get_data()
    field = data.get("edit_field")
    new_value = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
    if field == "start_time":
        try:
            dt_obj = dt.datetime.strptime(new_value, "%d.%m %H:%M")
            dt_obj = dt_obj.replace(year=dt.datetime.now(TZ).year)
            new_value = int(dt_obj.timestamp())
        except Exception:
            await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: 15.09 09:00")
            return

    if field == "places_total":
        try:
            n = int(new_value)
            if not 1 <= n <= 20:
                raise ValueError
            new_value = n
        except Exception:
            await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20.")
            return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏ FSM
    await state.update_data({field: new_value})
    preview = format_order_card(await state.get_data(), order_id=0)
    await message.answer(
        f"‚úÖ –ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.\n\n{preview}", reply_markup=preview_keyboard()
    )
    await state.set_state(CreateOrder.confirm)
