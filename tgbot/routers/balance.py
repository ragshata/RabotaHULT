# -*- coding: utf-8 -*-
import sqlite3
import datetime as dt
from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from tgbot.data.config import PATH_DATABASE
from tgbot.routers.orders import get_worker
from tgbot.services.tz import TZ

router = Router()


# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ======
def get_balance(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ä–∞–±–æ—Ç–Ω–∏–∫–∞"""
    worker = get_worker(user_id)
    if not worker:
        return 0, []

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        cur = con.cursor()

        # –û–±—â–∏–π –±–∞–ª–∞–Ω—Å (–Ω–µ –≤—ã–ø–ª–∞—á–µ–Ω–æ)
        total = cur.execute(
            """
            SELECT COALESCE(SUM(amount),0) AS total
            FROM transactions
            WHERE worker_id=? AND status='unpaid'
            """,
            (worker["id"],),
        ).fetchone()["total"]

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        rows = cur.execute(
            """
            SELECT t.*, o.description, o.id as order_id
            FROM transactions t
            JOIN orders o ON o.id = t.order_id
            WHERE t.worker_id=?
            ORDER BY t.created_at DESC
            LIMIT 20
            """,
            (worker["id"],),
        ).fetchall()

    return total, rows


# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======
@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    total, rows = get_balance(message.from_user.id)

    text = f"üí∞ <b>–ò—Ç–æ–≥–æ –∫ –≤—ã–ø–ª–∞—Ç–µ:</b> {total} ‚ÇΩ\n\nüìú <b>–ò—Å—Ç–æ—Ä–∏—è:</b>\n"
    if not rows:
        text += "‚Äî –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
    else:
        for r in rows:
            date = dt.datetime.fromtimestamp(r["created_at"], TZ).strftime("%d.%m")
            status = "‚úÖ –≤—ã–ø–ª–∞—á–µ–Ω–æ" if r["status"] == "paid" else "‚åõ –Ω–µ –≤—ã–ø–ª–∞—á–µ–Ω–æ"
            text += f"‚Äî {date} | –ó–∞–∫–∞–∑ ‚Ññ{r['order_id']} | {r['amount']} ‚ÇΩ | {status}\n"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ÑπÔ∏è –£—Å–ª–æ–≤–∏—è –≤—ã–ø–ª–∞—Ç", callback_data="payout_info")]
        ]
    )
    await message.answer(text, reply_markup=kb, parse_mode="HTML")


@router.callback_query(F.data == "payout_info")
async def payout_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–ª–∞—Ç–∞—Ö"""
    await callback.message.answer(
        "‚ÑπÔ∏è <b>–£—Å–ª–æ–≤–∏—è –≤—ã–ø–ª–∞—Ç</b>\n\n"
        "‚Ä¢ –í—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ (–°–ë–ü / –∫–∞—Ä—Ç–∞ / –Ω–∞–ª).\n"
        "‚Ä¢ –°—Ä–æ–∫ ‚Äî –≤ –∫–æ–Ω—Ü–µ —Å–º–µ–Ω—ã –∏–ª–∏ –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.\n"
        "‚Ä¢ –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω –∏–∑-–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî —ç—Ç–æ <b>–Ω–µ –≤–ª–∏—è–µ—Ç</b> –Ω–∞ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥.",
        parse_mode="HTML",
    )
    await callback.answer()
