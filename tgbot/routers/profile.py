# -*- coding: utf-8 -*-
import sqlite3
from aiogram import Router, F, types
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.fsm.state import StatesGroup, State

from tgbot.data.config import PATH_DATABASE

router = Router()


class ProfileEdit(StatesGroup):
    name = State()
    district = State()
    citizenship = State()
    country = State()
    phone = State()


# === –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è ===
def get_user_profile(user_id: int) -> dict | None:
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        row = con.execute(
            "SELECT * FROM workers WHERE telegram_id=?", (user_id,)
        ).fetchone()
        return dict(row) if row else None


# === –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è ===
def profile_text(profile: dict) -> str:
    text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üßæ –ò–º—è: {profile['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {profile['phone']}\n"
        f"üèô –ì–æ—Ä–æ–¥: {profile.get('city','‚Äî')}\n"
        f"üìç –†–∞–π–æ–Ω: {profile['district']}\n"
        f"üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {profile['citizenship']}"
    )
    if profile["citizenship"] == "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü" and profile.get("country"):
        text += f" ({profile['country']})"
    text += f"\n‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {profile.get('rating', 0):.1f}"
    return text


# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è ===
def profile_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="profile_edit:name"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="profile_edit:phone"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìç –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–π–æ–Ω", callback_data="profile_edit:district"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üåç –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ",
                    callback_data="profile_edit:citizenship",
                )
            ],
        ]
    )


# === –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è ===
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    profile = get_user_profile(message.from_user.id)
    if not profile:
        await message.answer("‚ùóÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
        return
    await message.answer(
        profile_text(profile), reply_markup=profile_keyboard(), parse_mode="HTML"
    )


# === –í—Ö–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===
@router.callback_query(F.data.startswith("profile_edit:"))
async def edit_profile(callback: CallbackQuery, state):
    field = callback.data.split(":")[1]

    if field == "name":
        await state.set_state(ProfileEdit.name)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (2‚Äì40 —Å–∏–º–≤–æ–ª–æ–≤):")

    elif field == "phone":
        await state.set_state(ProfileEdit.phone)
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
        await callback.message.answer(
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb
        )

    elif field == "district":
        await state.set_state(ProfileEdit.district)
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π", callback_data="set_district:–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π"
                    ),
                    InlineKeyboardButton(
                        text="–í–µ—Ä—Ö-–ò—Å–µ—Ç—Å–∫–∏–π", callback_data="set_district:–í–µ—Ä—Ö-–ò—Å–µ—Ç—Å–∫–∏–π"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π",
                        callback_data="set_district:–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π",
                    ),
                    InlineKeyboardButton(
                        text="–ö–∏—Ä–æ–≤—Å–∫–∏–π", callback_data="set_district:–ö–∏—Ä–æ–≤—Å–∫–∏–π"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="–õ–µ–Ω–∏–Ω—Å–∫–∏–π", callback_data="set_district:–õ–µ–Ω–∏–Ω—Å–∫–∏–π"
                    ),
                    InlineKeyboardButton(
                        text="–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", callback_data="set_district:–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="–û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ–≤—Å–∫–∏–π",
                        callback_data="set_district:–û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ–≤—Å–∫–∏–π",
                    ),
                    InlineKeyboardButton(
                        text="–ß–∫–∞–ª–æ–≤—Å–∫–∏–π", callback_data="set_district:–ß–∫–∞–ª–æ–≤—Å–∫–∏–π"
                    ),
                ],
            ]
        )
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=kb)

    elif field == "citizenship":
        await state.set_state(ProfileEdit.citizenship)
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üá∑üá∫ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–§", callback_data="set_citizenship:–†–§"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üåç –ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü", callback_data="set_citizenship:–ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="ü§ù –õ—é–±–æ–µ", callback_data="set_citizenship:–õ—é–±–æ–µ"
                    )
                ],
            ]
        )
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:", reply_markup=kb)

    await callback.answer()


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ ===
@router.message(ProfileEdit.name)
async def save_name(message: types.Message, state):
    value = message.text.strip()
    if not (2 <= len(value) <= 40) or value.isdigit():
        await message.answer("‚ùóÔ∏è –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    with sqlite3.connect(PATH_DATABASE) as con:
        con.execute(
            "UPDATE workers SET name=? WHERE telegram_id=?",
            (value, message.from_user.id),
        )
        con.commit()

    await state.clear()
    profile = get_user_profile(message.from_user.id)
    await message.answer(
        "‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.\n\n" + profile_text(profile),
        reply_markup=profile_keyboard(),
        parse_mode="HTML",
    )


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ===
@router.message(ProfileEdit.phone, F.contact)
async def save_phone(message: types.Message, state):
    phone = message.contact.phone_number
    with sqlite3.connect(PATH_DATABASE) as con:
        con.execute(
            "UPDATE workers SET phone=? WHERE telegram_id=?",
            (phone, message.from_user.id),
        )
        con.commit()

    await state.clear()
    profile = get_user_profile(message.from_user.id)
    await message.answer(
        "‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω.\n\n" + profile_text(profile),
        reply_markup=profile_keyboard(),
        parse_mode="HTML",
    )


@router.message(ProfileEdit.phone)
async def invalid_phone_edit(message: types.Message):
    await message.answer("‚ùóÔ∏è –ù—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä. –ù–∞–∂–º–∏—Ç–µ ¬´üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª.")


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ ===
@router.callback_query(F.data.startswith("set_district:"))
async def save_district(callback: CallbackQuery, state):
    district = callback.data.split(":")[1]
    with sqlite3.connect(PATH_DATABASE) as con:
        con.execute(
            "UPDATE workers SET district=? WHERE telegram_id=?",
            (district, callback.from_user.id),
        )
        con.commit()

    await state.clear()
    profile = get_user_profile(callback.from_user.id)
    await callback.message.edit_text(
        "‚úÖ –†–∞–π–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω.\n\n" + profile_text(profile),
        reply_markup=profile_keyboard(),
        parse_mode="HTML",
    )
    await callback.answer()


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ ===
@router.callback_query(F.data.startswith("set_citizenship:"))
async def save_citizenship(callback: CallbackQuery, state):
    citizenship = callback.data.split(":")[1]

    if citizenship == "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü":
        await state.set_state(ProfileEdit.country)
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data="set_country:–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"
                    ),
                    InlineKeyboardButton(
                        text="–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", callback_data="set_country:–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω", callback_data="set_country:–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω"
                    ),
                    InlineKeyboardButton(
                        text="–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω", callback_data="set_country:–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω", callback_data="set_country:–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω"
                    ),
                    InlineKeyboardButton(
                        text="–ê—Ä–º–µ–Ω–∏—è", callback_data="set_country:–ê—Ä–º–µ–Ω–∏—è"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="–ë–µ–ª–∞—Ä—É—Å—å", callback_data="set_country:–ë–µ–ª–∞—Ä—É—Å—å"
                    ),
                    InlineKeyboardButton(
                        text="–î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞", callback_data="set_country:–î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞"
                    ),
                ],
            ]
        )
        await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=kb)
    else:
        with sqlite3.connect(PATH_DATABASE) as con:
            con.execute(
                "UPDATE workers SET citizenship=?, country=NULL WHERE telegram_id=?",
                (citizenship, callback.from_user.id),
            )
            con.commit()

        await state.clear()
        profile = get_user_profile(callback.from_user.id)
        await callback.message.edit_text(
            "‚úÖ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.\n\n" + profile_text(profile),
            reply_markup=profile_keyboard(),
            parse_mode="HTML",
        )
    await callback.answer()


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã (–¥–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–∞) ===
@router.callback_query(F.data.startswith("set_country:"))
async def save_country(callback: CallbackQuery, state):
    country = callback.data.split(":")[1]
    with sqlite3.connect(PATH_DATABASE) as con:
        con.execute(
            "UPDATE workers SET citizenship='–ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü', country=? WHERE telegram_id=?",
            (country, callback.from_user.id),
        )
        con.commit()

    await state.clear()
    profile = get_user_profile(callback.from_user.id)
    await callback.message.edit_text(
        "‚úÖ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.\n\n" + profile_text(profile),
        reply_markup=profile_keyboard(),
        parse_mode="HTML",
    )
    await callback.answer()
