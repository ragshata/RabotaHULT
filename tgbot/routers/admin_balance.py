# -*- coding: utf-8 -*-
import sqlite3
import datetime as dt
from aiogram import Router, F, types, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from tgbot.data.config import PATH_DATABASE
from tgbot.utils.misc.bot_filters import IsAdmin

router = Router()
router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())


# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ======
def get_unpaid_summary():
    """–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –∏ —Å—É–º–º –∫ –≤—ã–ø–ª–∞—Ç–µ"""
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        rows = con.execute(
            """
            SELECT w.id as worker_id, w.telegram_id, w.name, w.phone, SUM(t.amount) as total
            FROM transactions t
            JOIN workers w ON w.id = t.worker_id
            WHERE t.status='unpaid'
            GROUP BY w.id
            ORDER BY total DESC
            """
        ).fetchall()
    return [dict(r) for r in rows]


def mark_paid(worker_id: int):
    """–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∫–∞–∫ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã–µ"""
    now = int(dt.datetime.now().timestamp())
    with sqlite3.connect(PATH_DATABASE) as con:
        cur = con.cursor()
        cur.execute(
            "UPDATE transactions SET status='paid', created_at=? WHERE worker_id=? AND status='unpaid'",
            (now, worker_id),
        )
        con.commit()
        return cur.rowcount  # —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –æ–±–Ω–æ–≤–∏–ª–∏


# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======
@router.message(F.text == "üí∞ –í—ã–ø–ª–∞—Ç—ã")
async def admin_payouts(message: types.Message):
    """–≠–∫—Ä–∞–Ω –≤—ã–ø–ª–∞—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    rows = get_unpaid_summary()
    if not rows:
        await message.answer("‚úÖ –í—Å–µ –≤—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã, –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –Ω–µ—Ç.")
        return

    text = "üí∞ <b>–ù–µ–≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å—É–º–º—ã:</b>\n\n"
    kb = []
    for r in rows:
        text += f"üë§ {r['name']} ({r['phone']}) ‚Äî {r['total']} ‚ÇΩ\n"
        kb.append(
            [
                InlineKeyboardButton(
                    text=f"‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å {r['name']} ({r['total']} ‚ÇΩ)",
                    callback_data=f"admin_pay:{r['worker_id']}",
                )
            ]
        )

    await message.answer(
        text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb), parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("admin_pay:"))
async def admin_pay(callback: CallbackQuery, bot: Bot):
    """–û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–ª–∞—Ç –∞–¥–º–∏–Ω–æ–º"""
    worker_id = int(callback.data.split(":")[1])
    count = mark_paid(worker_id)

    if count > 0:
        # –¥–æ—Å—Ç–∞–Ω–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º ID —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
        with sqlite3.connect(PATH_DATABASE) as con:
            con.row_factory = sqlite3.Row
            w = con.execute(
                "SELECT telegram_id, name FROM workers WHERE id=?", (worker_id,)
            ).fetchone()

        if w and w["telegram_id"]:
            try:
                await bot.send_message(
                    w["telegram_id"],
                    f"‚úÖ –í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ {count} —Å–º–µ–Ω(—ã) –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã–µ.",
                )
            except:
                pass

        await callback.answer(
            f"‚úÖ –í—ã–ø–ª–∞—Ç—ã ({count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π) –æ—Ç–º–µ—á–µ–Ω—ã!", show_alert=True
        )
        await callback.message.edit_text("–í—ã–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω—ã. –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫.")
    else:
        await callback.answer("‚ùó –ù–µ—Ç –Ω–µ–≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.", show_alert=True)
