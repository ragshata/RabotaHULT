# -*- coding: utf-8 -*-
import sqlite3
import datetime as dt
from aiogram import Router, F, types, Bot
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
)

from tgbot.data.config import PATH_DATABASE
from tgbot.utils.misc.bot_filters import IsAdmin

router = Router()
router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())


# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ======
def fmt_order_row(o: dict) -> str:
    start = dt.datetime.fromtimestamp(o["start_time"]).strftime("%d.%m %H:%M")
    return (
        f"#{o['id']} | {start} | {o['client_name']} | {o['address']} ({o['district']}) | "
        f"{o['format']} | {o['places_taken']}/{o['places_total']} | {o['status']}"
    )


# ====== 1. –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ ======
@router.message(F.text == "/admin")
async def admin_menu_entry(message: types.Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—ã", callback_data="admin_orders")],
            [InlineKeyboardButton(text="üë∑ –†–∞–±–æ—á–∏–µ", callback_data="admin_workers")],
            [InlineKeyboardButton(text="üí∞ –í—ã–ø–ª–∞—Ç—ã", callback_data="admin_payouts")],
        ]
    )
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)


# ====== –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ ======
@router.message(F.text == "üì¶ –ó–∞–∫–∞–∑—ã")
async def show_orders(message: types.Message):
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        rows = con.execute(
            "SELECT * FROM orders ORDER BY start_time DESC LIMIT 10"
        ).fetchall()

    if not rows:
        await message.answer("‚ùóÔ∏è –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    kb = []
    for o in rows:
        o = dict(o)
        start = dt.datetime.fromtimestamp(o["start_time"]).strftime("%d.%m %H:%M")
        text = f"#{o['id']} | {start} | {o['client_name']}"
        kb.append(
            [InlineKeyboardButton(text=text, callback_data=f"admin_order:{o['id']}")]
        )

    await message.answer(
        "üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ üëá",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb),
    )


# ====== –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞ ======
@router.callback_query(F.data.startswith("admin_order:"))
async def show_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        o = con.execute("SELECT * FROM orders WHERE id=?", (order_id,)).fetchone()
        workers = con.execute(
            """
            SELECT w.name, w.phone, s.status 
            FROM shifts s 
            JOIN workers w ON s.worker_id=w.id 
            WHERE s.order_id=?
            """,
            (order_id,),
        ).fetchall()

    if not o:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    o = dict(o)
    start = dt.datetime.fromtimestamp(o["start_time"]).strftime("%d.%m %H:%M")

    # –ü–µ—Ä–µ–≤–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∞
    format_map = {
        "hour": "‚è± –ü–æ—á–∞—Å–æ–≤–∞—è",
        "shift8": "üïó –°–º–µ–Ω–∞ (8—á)",
        "day12": "üìÖ –î–µ–Ω—å (12—á)",
    }
    fmt = format_map.get(o["format"], o["format"])

    # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
    status_map = {
        "created": "üü¢ –û—Ç–∫—Ä—ã—Ç",
        "started": "üîµ –í —Ä–∞–±–æ—Ç–µ",
        "done": "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω",
        "cancelled": "‚ùå –û—Ç–º–µ–Ω—ë–Ω",
    }
    status = status_map.get(o["status"], o["status"])

    text = (
        f"üì¶ <b>–ó–∞–∫–∞–∑ #{o['id']}</b>\n\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {o['client_name']} ({o['client_phone']})\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {o['description']}\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {o['address']} ({o['district']})\n"
        f"‚è∞ <b>–°—Ç–∞—Ä—Ç:</b> {start}\n"
        f"‚öôÔ∏è <b>–§–æ—Ä–º–∞—Ç:</b> {fmt}\n"
        f"üë• <b>–ú–µ—Å—Ç–∞:</b> {o['places_taken']}/{o['places_total']}\n"
        f"üåç <b>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</b> {o['citizenship_required']}\n"
        f"‚ÑπÔ∏è <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b> {o['features']}\n"
        f"üìå <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
        f"<b>üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</b>\n"
    )

    if workers:
        for w in workers:
            # –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
            st_map = {
                "accepted": "üìå –ü—Ä–∏–Ω—è–ª",
                "arrived": "üìç –ü—Ä–∏–±—ã–ª",
                "done": "‚úÖ –û—Ç—Ä–∞–±–æ—Ç–∞–ª",
                "no_show": "‚ö†Ô∏è –ù–µ —è–≤–∏–ª—Å—è",
                "cancelled": "‚ùå –û—Ç–º–µ–Ω–∏–ª",
            }
            ws = st_map.get(w["status"], w["status"])
            text += f"‚Äî {w['name']} ({w['phone']}) [{ws}]\n"
    else:
        text += "‚Äî –ø–æ–∫–∞ –Ω–µ—Ç\n"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å", callback_data=f"admin_assign:{order_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ûñ –°–Ω—è—Ç—å", callback_data=f"admin_unassign:{order_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üöÄ –†–∞—Å—Å—ã–ª–∫–∞", callback_data=f"admin_broadcast:{order_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
                    callback_data=f"admin_cancel_order:{order_id}",
                )
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_orders_back")],
        ]
    )

    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")


# ====== –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É ======
@router.callback_query(F.data == "admin_orders_back")
async def back_to_orders(callback: CallbackQuery):
    await show_orders(callback.message)


# ====== 3. –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ ======
@router.callback_query(F.data.startswith("admin_cancel_order:"))
async def cancel_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    with sqlite3.connect(PATH_DATABASE) as con:
        cur = con.cursor()
        cur.execute("UPDATE orders SET status='cancelled' WHERE id=?", (order_id,))
        con.commit()
    await callback.answer(f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω.", show_alert=True)
    await callback.message.edit_text(
        f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–†–∞–±–æ—Ç–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."
    )


# === 4. –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ ===
@router.callback_query(F.data.startswith("admin_assign:"))
async def assign_worker(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        workers = con.execute(
            "SELECT id, name, phone FROM workers WHERE status='active'"
        ).fetchall()

    if not workers:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤", show_alert=True)
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{w['name']} ({w['phone']})",
                    callback_data=f"admin_do_assign:{order_id}:{w['id']}",
                )
            ]
            for w in workers
        ]
    )
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:", reply_markup=kb
    )


@router.callback_query(F.data.startswith("admin_do_assign:"))
async def do_assign(callback: CallbackQuery, bot: Bot):
    _, order_id, worker_id = callback.data.split(":")
    order_id, worker_id = int(order_id), int(worker_id)

    with sqlite3.connect(PATH_DATABASE) as con:
        cur = con.cursor()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Ç –ª–∏ —É–∂–µ
        exists = cur.execute(
            "SELECT 1 FROM shifts WHERE order_id=? AND worker_id=?",
            (order_id, worker_id),
        ).fetchone()
        if exists:
            await callback.answer("–£–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.", show_alert=True)
            return

        cur.execute(
            "INSERT INTO shifts (order_id, worker_id, status, start_time) VALUES (?, ?, 'accepted', strftime('%s','now'))",
            (order_id, worker_id),
        )
        cur.execute(
            "UPDATE orders SET places_taken = places_taken + 1 WHERE id=?", (order_id,)
        )
        tg_id = cur.execute(
            "SELECT telegram_id FROM workers WHERE id=?", (worker_id,)
        ).fetchone()[0]
        con.commit()

    await bot.send_message(
        tg_id, f"‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ –∑–∞–∫–∞–∑ #{order_id}."
    )
    await callback.answer("–ù–∞–∑–Ω–∞—á–µ–Ω.")


# === 5. –°–Ω—è—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ ===
@router.callback_query(F.data.startswith("admin_unassign:"))
async def unassign_worker(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        workers = con.execute(
            "SELECT w.id, w.name, w.phone FROM shifts s JOIN workers w ON s.worker_id=w.id WHERE s.order_id=?",
            (order_id,),
        ).fetchall()

    if not workers:
        await callback.answer("–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤", show_alert=True)
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{w['name']} ({w['phone']})",
                    callback_data=f"admin_do_unassign:{order_id}:{w['id']}",
                )
            ]
            for w in workers
        ]
    )
    await callback.message.edit_text(
        f"–ö–æ–≥–æ —Å–Ω—è—Ç—å —Å –∑–∞–∫–∞–∑–∞ #{order_id}?", reply_markup=kb
    )


@router.callback_query(F.data.startswith("admin_do_unassign:"))
async def do_unassign(callback: CallbackQuery, bot: Bot):
    _, order_id, worker_id = callback.data.split(":")
    order_id, worker_id = int(order_id), int(worker_id)

    with sqlite3.connect(PATH_DATABASE) as con:
        cur = con.cursor()
        cur.execute(
            "DELETE FROM shifts WHERE order_id=? AND worker_id=?", (order_id, worker_id)
        )
        cur.execute(
            "UPDATE orders SET places_taken = places_taken - 1 WHERE id=?", (order_id,)
        )
        tg_id = cur.execute(
            "SELECT telegram_id FROM workers WHERE id=?", (worker_id,)
        ).fetchone()[0]
        con.commit()

    await bot.send_message(
        tg_id,
        f"‚ùå –í—ã —Å–Ω—è—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –∑–∞–∫–∞–∑–∞ #{order_id}. –≠—Ç–æ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥.",
    )
    await callback.answer("–°–Ω—è—Ç.")


# ====== 4. –û—Ç–º–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–æ–ø–ª–∞—Ç—ã ======
@router.callback_query(F.data.startswith("admin_cancel_unpaid:"))
async def cancel_unpaid(callback: CallbackQuery, bot: Bot):
    order_id = int(callback.data.split(":")[1])
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        cur = con.cursor()
        cur.execute("UPDATE orders SET status='cancelled' WHERE id=?", (order_id,))
        # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
        workers = cur.execute(
            "SELECT w.telegram_id FROM shifts s JOIN workers w ON s.worker_id=w.id WHERE s.order_id=?",
            (order_id,),
        ).fetchall()
        con.commit()

    # —É–≤–µ–¥–æ–º–ª—è–µ–º
    for w in workers:
        try:
            await bot.send_message(
                w["telegram_id"],
                f"‚ö†Ô∏è –†–∞–±–æ—Ç–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: –∑–∞–∫–∞–∑ ‚Ññ{order_id} –∑–∞–∫—Ä—ã—Ç –∏–∑-–∑–∞ –Ω–µ–æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞.\n"
                f"–≠—Ç–æ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥.",
            )
        except Exception:
            pass

    await callback.answer(f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω (–Ω–µ–æ–ø–ª–∞—Ç–∞).", show_alert=True)
    await callback.message.edit_text(
        f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ–æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞.\n\n–†–∞–±–æ—Ç–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."
    )


def admin_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"),
                KeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—ã"),
            ],
            [
                KeyboardButton(text="üë∑ –†–∞–±–æ—á–∏–µ"),
                KeyboardButton(text="üí∞ –í—ã–ø–ª–∞—Ç—ã"),
            ],
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚Ä¶",
    )


@router.message(F.text == "/admin")
async def admin_menu_entry(message: types.Message):
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
