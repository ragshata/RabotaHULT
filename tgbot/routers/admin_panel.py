# -*- coding: utf-8 -*-
import sqlite3
import datetime as dt
from aiogram import Router, F, types, Bot
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
)

from tgbot.data.config import PATH_DATABASE, get_admins
from tgbot.utils.misc.bot_filters import IsAdmin
from aiogram.fsm.state import StatesGroup, State
from tgbot.utils.misc.bot_models import FSM

router = Router()
router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())


# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ======
def fmt_order_row(o: dict) -> str:
    start = dt.datetime.fromtimestamp(o["start_time"]).strftime("%d.%m %H:%M")
    return (
        f"#{o['id']} | {start} | {o['client_name']} | {o['address']} ({o['district']}) | "
        f"{o['format']} | {o['places_taken']}/{o['places_total']} | {o['status']}"
    )


# ====== 1. –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ ======
@router.message(F.text == "/admin")
async def admin_menu_entry(message: types.Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—ã", callback_data="admin_orders")],
            [InlineKeyboardButton(text="üë∑ –†–∞–±–æ—á–∏–µ", callback_data="admin_workers")],
            [InlineKeyboardButton(text="üí∞ –í—ã–ø–ª–∞—Ç—ã", callback_data="admin_payouts")],
        ]
    )
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)


@router.callback_query(F.data.startswith("admin_order:"))
async def open_admin_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    await show_order(callback, order_id)


# ====== –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ ======
@router.message(F.text == "üì¶ –ó–∞–∫–∞–∑—ã")
async def show_orders(message: types.Message):
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        rows = con.execute(
            "SELECT * FROM orders ORDER BY start_time DESC LIMIT 10"
        ).fetchall()

    if not rows:
        await message.answer("‚ùóÔ∏è –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    kb = []
    for o in rows:
        o = dict(o)
        start = dt.datetime.fromtimestamp(o["start_time"]).strftime("%d.%m %H:%M")
        text = f"#{o['id']} | {start} | {o['client_name']}"
        kb.append(
            [InlineKeyboardButton(text=text, callback_data=f"admin_order:{o['id']}")]
        )

    await message.answer(
        "üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ üëá",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb),
    )


# === FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π ===
class AdminEditOrder(StatesGroup):
    waiting_value = State()


# ====== –ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞ ======
async def show_order(message_or_cb, order_id: int | None = None):
    """–ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å callback, –∏ —Å message)."""
    if isinstance(message_or_cb, types.CallbackQuery):
        callback = message_or_cb
        message = callback.message
        if order_id is None:
            order_id = int(callback.data.split(":")[1])
    else:
        message = message_or_cb

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        o = con.execute("SELECT * FROM orders WHERE id=?", (order_id,)).fetchone()
        workers = con.execute(
            """
            SELECT w.name, w.phone, s.status 
            FROM shifts s 
            JOIN workers w ON s.worker_id=w.id 
            WHERE s.order_id=?
            """,
            (order_id,),
        ).fetchall()

    if not o:
        if isinstance(message_or_cb, types.CallbackQuery):
            await message_or_cb.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        else:
            await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    o = dict(o)
    start = dt.datetime.fromtimestamp(o["start_time"]).strftime("%d.%m %H:%M")

    format_map = {
        "hour": "‚è±Ô∏è –ü–æ—á–∞—Å–æ–≤–∞—è",
        "shift8": "üïó –°–º–µ–Ω–∞ (8—á)",
        "day12": "üìÖ –î–µ–Ω—å (12—á)",
    }
    status_map = {
        "created": "üü¢ –û—Ç–∫—Ä—ã—Ç",
        "started": "üîµ –í —Ä–∞–±–æ—Ç–µ",
        "done": "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω",
        "cancelled": "‚ùå –û—Ç–º–µ–Ω—ë–Ω",
    }

    fmt = format_map.get(o["format"], o["format"])
    status = status_map.get(o["status"], o["status"])

    text = (
        f"üì¶ <b>–ó–∞–∫–∞–∑ #{o['id']}</b>\n\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {o['client_name']} ({o['client_phone']})\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {o['description']}\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {o['address']} ({o['district']})\n"
        f"‚è∞ <b>–°—Ç–∞—Ä—Ç:</b> {start}\n"
        f"‚öôÔ∏è <b>–§–æ—Ä–º–∞—Ç:</b> {fmt}\n"
        f"üë• <b>–ú–µ—Å—Ç–∞:</b> {o['places_taken']}/{o['places_total']}\n"
        f"üåç <b>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</b> {o['citizenship_required']}\n"
        f"‚ÑπÔ∏è <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b> {o['features']}\n"
        f"üìå <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
        f"<b>üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</b>\n"
    )

    if workers:
        for w in workers:
            st_map = {
                "accepted": "üìå –ü—Ä–∏–Ω—è–ª",
                "arrived": "üìç –ü—Ä–∏–±—ã–ª",
                "done": "‚úÖ –û—Ç—Ä–∞–±–æ—Ç–∞–ª",
                "no_show": "‚ö†Ô∏è –ù–µ —è–≤–∏–ª—Å—è",
                "cancelled": "‚ùå –û—Ç–º–µ–Ω–∏–ª",
            }
            ws = st_map.get(w["status"], w["status"])
            text += f"‚Äî {w['name']} ({w['phone']}) [{ws}]\n"
    else:
        text += "‚Äî –ø–æ–∫–∞ –Ω–µ—Ç\n"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_edit_order:{order_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üöÄ –†–∞—Å—Å—ã–ª–∫–∞", callback_data=f"admin_broadcast:{order_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
                    callback_data=f"admin_cancel_order:{order_id}",
                )
            ],
            [
                InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑",
                    callback_data=f"admin_delete_order_confirm:{order_id}",
                )
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_orders_back")],
        ]
    )

    if isinstance(message_or_cb, types.CallbackQuery):
        await message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await message_or_cb.answer()
    else:
        await message.answer(text, reply_markup=kb, parse_mode="HTML")


# ====== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è ======
@router.callback_query(F.data.startswith("admin_delete_order_confirm:"))
async def admin_delete_order_confirm(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                    callback_data=f"admin_delete_order:{order_id}",
                ),
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞",
                    callback_data=f"admin_order:{order_id}",
                ),
            ]
        ]
    )

    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ #{order_id}</b>?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ: –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.",
        reply_markup=kb,
        parse_mode="HTML",
    )
    await callback.answer()


# ====== –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ======
@router.callback_query(F.data.startswith("admin_delete_order:"))
async def admin_delete_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])

    with sqlite3.connect(PATH_DATABASE) as con:
        cur = con.cursor()
        # –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        cur.execute("DELETE FROM transactions   WHERE order_id=?", (order_id,))
        cur.execute("DELETE FROM shifts         WHERE order_id=?", (order_id,))
        cur.execute("DELETE FROM skipped_orders WHERE order_id=?", (order_id,))
        cur.execute("DELETE FROM orders         WHERE id=?", (order_id,))
        con.commit()

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    await callback.answer("‚úÖ –ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω.", show_alert=True)
    await callback.message.edit_text(f"üóë –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")

    # üëá –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
    await show_orders(callback.message)


# ====== –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è ======
@router.callback_query(F.data.startswith("admin_edit_order:"))
async def admin_edit_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìç –ê–¥—Ä–µ—Å",
                    callback_data=f"admin_edit_field:address:{order_id}",
                ),
                InlineKeyboardButton(
                    text="‚è∞ –í—Ä–µ–º—è",
                    callback_data=f"admin_edit_field:start_time:{order_id}",
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üë• –ö–æ–ª-–≤–æ –º–µ—Å—Ç",
                    callback_data=f"admin_edit_field:places_total:{order_id}",
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚öôÔ∏è –§–æ—Ä–º–∞—Ç", callback_data=f"admin_edit_field:format:{order_id}"
                ),
                InlineKeyboardButton(
                    text="üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ",
                    callback_data=f"admin_edit_field:citizenship:{order_id}",
                ),
            ],
            [
                InlineKeyboardButton(
                    text="‚ÑπÔ∏è –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏",
                    callback_data=f"admin_edit_field:features:{order_id}",
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_order:{order_id}"
                )
            ],
        ]
    )
    await callback.message.edit_text("‚úèÔ∏è –ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb)
    await callback.answer()


# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ ======
@router.callback_query(F.data.startswith("admin_edit_field:"))
async def admin_edit_field(callback: CallbackQuery, state: FSM):
    _, field, order_id = callback.data.split(":")
    order_id = int(order_id)

    if field == "format":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚è±Ô∏è –ü–æ—á–∞—Å–æ–≤–∞—è",
                        callback_data=f"admin_set_value:format:hour:{order_id}",
                    ),
                    InlineKeyboardButton(
                        text="üïó –°–º–µ–Ω–∞ (8—á)",
                        callback_data=f"admin_set_value:format:shift8:{order_id}",
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üìÖ –î–µ–Ω—å (12—á)",
                        callback_data=f"admin_set_value:format:day12:{order_id}",
                    )
                ],
            ]
        )
        await callback.message.edit_text("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç:", reply_markup=kb)
        await callback.answer()
        return

    if field == "citizenship":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üá∑üá∫ –†–§",
                        callback_data=f"admin_set_value:citizenship:–†–§:{order_id}",
                    ),
                    InlineKeyboardButton(
                        text="üåç –ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü",
                        callback_data=f"admin_set_value:citizenship:–ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü:{order_id}",
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="ü§ù –õ—é–±–æ–µ",
                        callback_data=f"admin_set_value:citizenship:–õ—é–±–æ–µ:{order_id}",
                    )
                ],
            ]
        )
        await callback.message.edit_text(
            "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:", reply_markup=kb
        )
        await callback.answer()
        return

    await state.set_state(AdminEditOrder.waiting_value)
    await state.update_data(order_id=order_id, field=field)
    await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ¬´{field}¬ª:")
    await callback.answer()


# ====== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ ======
@router.message(AdminEditOrder.waiting_value)
async def admin_save_text_edit(message, state: FSM):
    data = await state.get_data()
    field = data["field"]
    order_id = data["order_id"]
    value = message.text.strip()

    with sqlite3.connect(PATH_DATABASE) as con:
        cur = con.cursor()

        if field == "start_time":
            try:
                dt_obj = dt.datetime.strptime(value, "%d.%m %H:%M")
                dt_obj = dt_obj.replace(year=dt.datetime.now().year)
                value = int(dt_obj.timestamp())
                cur.execute(
                    "UPDATE orders SET start_time=? WHERE id=?", (value, order_id)
                )
            except ValueError:
                await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫: 15.09 09:00")
                return
        elif field == "places_total":
            try:
                n = int(value)
                if not 1 <= n <= 20:
                    raise ValueError
                cur.execute(
                    "UPDATE orders SET places_total=? WHERE id=?", (n, order_id)
                )
            except ValueError:
                await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20.")
                return
        else:
            cur.execute(f"UPDATE orders SET {field}=? WHERE id=?", (value, order_id))
        con.commit()

    await state.clear()
    await message.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –û–±–Ω–æ–≤–ª—è—é –∑–∞–∫–∞–∑...")
    await show_order(message, order_id)


# ====== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ ======
@router.callback_query(F.data.startswith("admin_set_value:"))
async def admin_set_value(callback: CallbackQuery):
    _, field, value, order_id = callback.data.split(":")
    order_id = int(order_id)
    column = "format" if field == "format" else "citizenship_required"

    with sqlite3.connect(PATH_DATABASE) as con:
        con.execute(f"UPDATE orders SET {column}=? WHERE id=?", (value, order_id))
        con.commit()

    await callback.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", show_alert=True)
    await show_order(callback, order_id)


# ====== –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É ======
@router.callback_query(F.data == "admin_orders_back")
async def back_to_orders(callback: CallbackQuery):
    await show_orders(callback.message)


# ====== 3. –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ ======
@router.callback_query(F.data.startswith("admin_cancel_order:"))
async def cancel_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    with sqlite3.connect(PATH_DATABASE) as con:
        cur = con.cursor()
        cur.execute("UPDATE orders SET status='cancelled' WHERE id=?", (order_id,))
        con.commit()
    await callback.answer(f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω.", show_alert=True)
    await callback.message.edit_text(
        f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–†–∞–±–æ—Ç–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."
    )


# === 4. –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ ===
@router.callback_query(F.data.startswith("admin_assign:"))
async def assign_worker(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        workers = con.execute(
            "SELECT id, name, phone FROM workers WHERE status='active'"
        ).fetchall()

    if not workers:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤", show_alert=True)
        return

    # –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ)
    rows = [
        [
            InlineKeyboardButton(
                text=f"{w['name']} ({w['phone']})",
                callback_data=f"admin_do_assign:{order_id}:{w['id']}",
            )
        ]
        for w in workers
    ]

    # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è ¬´–ù–∞–∑–∞–¥¬ª ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–∫–∞–∑–∞
    rows.append(
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_order:{order_id}")]
    )

    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=rows),
    )
    await callback.answer()


# === 4. –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ ===
@router.callback_query(F.data.startswith("admin_assign:"))
async def assign_worker(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])

    admin_ids = set(get_admins())  # —Å–ø–∏—Å–æ–∫ telegram_id –∞–¥–º–∏–Ω–æ–≤

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row

        where_sql = "WHERE status='active'"
        params = []

        if admin_ids:
            placeholders = ",".join("?" * len(admin_ids))
            where_sql += f" AND telegram_id NOT IN ({placeholders})"
            params.extend(list(admin_ids))

        workers = con.execute(
            f"SELECT id, name, phone FROM workers {where_sql} ORDER BY id DESC",
            params,
        ).fetchall()

    if not workers:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.", show_alert=True)
        return

    rows = [
        [
            InlineKeyboardButton(
                text=f"{w['name']} ({w['phone']})",
                callback_data=f"admin_do_assign:{order_id}:{w['id']}",
            )
        ]
        for w in workers
    ]
    rows.append(
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_order:{order_id}")]
    )

    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=rows),
    )
    await callback.answer()


# === 4.1 –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ===
@router.callback_query(F.data.startswith("admin_do_assign:"))
async def do_assign(callback: CallbackQuery, bot: Bot):
    _, order_id, worker_id = callback.data.split(":")
    order_id, worker_id = int(order_id), int(worker_id)

    admin_ids = set(get_admins())  # –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        cur = con.cursor()

        # –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –∞–¥–º–∏–Ω –ª–∏ —ç—Ç–æ—Ç worker
        w = cur.execute(
            "SELECT id, telegram_id FROM workers WHERE id=?", (worker_id,)
        ).fetchone()
        if not w:
            await callback.answer("–†–∞–±–æ—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        if w["telegram_id"] in admin_ids:
            await callback.answer("–ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
            return

        # —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω?
        exists = cur.execute(
            "SELECT 1 FROM shifts WHERE order_id=? AND worker_id=?",
            (order_id, worker_id),
        ).fetchone()
        if exists:
            await callback.answer("–≠—Ç–æ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.", show_alert=True)
            return

        # —Å–æ–∑–¥–∞—ë–º —Å–º–µ–Ω—É –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º X/Y
        cur.execute(
            "INSERT INTO shifts (order_id, worker_id, status, start_time) "
            "VALUES (?, ?, 'accepted', (SELECT start_time FROM orders WHERE id=?))",
            (order_id, worker_id, order_id),
        )
        cur.execute(
            "UPDATE orders SET places_taken = places_taken + 1 WHERE id=?", (order_id,)
        )

        tg_row = cur.execute(
            "SELECT telegram_id FROM workers WHERE id=?", (worker_id,)
        ).fetchone()
        con.commit()

    tg_id = tg_row["telegram_id"] if tg_row else None
    if tg_id:
        try:
            await bot.send_message(
                tg_id, f"‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ –∑–∞–∫–∞–∑ #{order_id}."
            )
        except Exception:
            pass

    await callback.answer("–ù–∞–∑–Ω–∞—á–µ–Ω.", show_alert=True)
    # –≤–µ—Ä–Ω—ë–º—Å—è –≤ –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–∫–∞–∑–∞
    await show_order(callback, order_id)


# === 5. –°–Ω—è—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ ===
@router.callback_query(F.data.startswith("admin_unassign:"))
async def unassign_worker(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        workers = con.execute(
            "SELECT w.id, w.name, w.phone FROM shifts s JOIN workers w ON s.worker_id=w.id WHERE s.order_id=?",
            (order_id,),
        ).fetchall()

    if not workers:
        await callback.answer("–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤", show_alert=True)
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{w['name']} ({w['phone']})",
                    callback_data=f"admin_do_unassign:{order_id}:{w['id']}",
                )
            ]
            for w in workers
        ]
    )
    await callback.message.edit_text(
        f"–ö–æ–≥–æ —Å–Ω—è—Ç—å —Å –∑–∞–∫–∞–∑–∞ #{order_id}?", reply_markup=kb
    )


# ====== 4. –û—Ç–º–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–æ–ø–ª–∞—Ç—ã ======
@router.callback_query(F.data.startswith("admin_cancel_unpaid:"))
async def cancel_unpaid(callback: CallbackQuery, bot: Bot):
    order_id = int(callback.data.split(":")[1])
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        cur = con.cursor()
        cur.execute("UPDATE orders SET status='cancelled' WHERE id=?", (order_id,))
        # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
        workers = cur.execute(
            "SELECT w.telegram_id FROM shifts s JOIN workers w ON s.worker_id=w.id WHERE s.order_id=?",
            (order_id,),
        ).fetchall()
        con.commit()

    # —É–≤–µ–¥–æ–º–ª—è–µ–º
    for w in workers:
        try:
            await bot.send_message(
                w["telegram_id"],
                f"‚ö†Ô∏è –†–∞–±–æ—Ç–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: –∑–∞–∫–∞–∑ ‚Ññ{order_id} –∑–∞–∫—Ä—ã—Ç –∏–∑-–∑–∞ –Ω–µ–æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞.\n"
                f"–≠—Ç–æ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥.",
            )
        except Exception:
            pass

    await callback.answer(f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω (–Ω–µ–æ–ø–ª–∞—Ç–∞).", show_alert=True)
    await callback.message.edit_text(
        f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ–æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞.\n\n–†–∞–±–æ—Ç–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."
    )


def admin_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"),
                KeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—ã"),
            ],
            [
                KeyboardButton(text="üë∑ –†–∞–±–æ—á–∏–µ"),
                KeyboardButton(text="üí∞ –í—ã–ø–ª–∞—Ç—ã"),
            ],
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚Ä¶",
    )


@router.message(F.text == "/admin")
async def admin_menu_entry(message: types.Message):
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
