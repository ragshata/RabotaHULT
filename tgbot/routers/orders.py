# -*- coding: utf-8 -*-
import sqlite3
import datetime
import urllib.parse
from aiogram import Router, F, types, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from tgbot.data.config import PATH_DATABASE
from tgbot.services.tz import TZ
from tgbot.utils.const_functions import format_display

router = Router()
PAGE_SIZE = 5


# ================= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ =================
def get_worker(user_id: int) -> dict | None:
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        row = con.execute(
            "SELECT * FROM workers WHERE telegram_id=?", (user_id,)
        ).fetchone()
        return dict(row) if row else None


def has_time_conflict(worker_id: int, new_start: int, fmt: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–º–µ–Ω"""
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        cur = con.cursor()
        shifts = cur.execute(
            """
            SELECT s.*, o.start_time, o.format 
            FROM shifts s JOIN orders o ON s.order_id=o.id
            WHERE s.worker_id=? AND s.status IN ('accepted','arrived')
            """,
            (worker_id,),
        ).fetchall()

        def duration(fmt):
            return (
                4 * 3600
                if fmt == "hour"
                else (8 * 3600 if fmt == "shift8" else 12 * 3600)
            )

        for sh in shifts:
            old_start = sh["start_time"]
            old_dur = duration(sh["format"])
            new_dur = duration(fmt)
            if not (
                new_start + new_dur <= old_start or old_start + old_dur <= new_start
            ):
                return True
        return False


def get_orders(user_id: int, page: int = 0):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏ –ø–æ–ª–Ω—ã–µ –ø–æ –º–µ—Å—Ç–∞–º."""
    now_ts = int(datetime.datetime.now(TZ).timestamp())

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        cur = con.cursor()

        # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ (–Ω–∞ 48—á)
        cur.execute(
            """
            SELECT order_id FROM skipped_orders
            WHERE worker_id = ? AND skipped_at > strftime('%s','now') - 48*3600
            """,
            (user_id,),
        )
        skipped = {row["order_id"] for row in cur.fetchall()}

        # –¢–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã:
        # - —Å—Ç–∞—Ç—É—Å = 'created'
        # - —Å—Ç–∞—Ä—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ 1 —á–∞—Å
        # - –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
        cur.execute(
            """
            SELECT * FROM orders
            WHERE status = 'created'
              AND start_time > ?
              AND places_taken < places_total
            ORDER BY start_time ASC
            """,
            (now_ts + 3600,),
        )

        all_orders = [dict(row) for row in cur.fetchall()]

        # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ
        filtered = [o for o in all_orders if o["id"] not in skipped]

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        start, end = page * PAGE_SIZE, page * PAGE_SIZE + PAGE_SIZE
        return filtered[start:end], len(filtered)


def orders_keyboard(orders: list[dict], page: int, total: int):
    kb = []
    for o in orders:
        kb.append(
            [
                InlineKeyboardButton(
                    text=order_button_text(o),
                    callback_data=f"order_card:{o['id']}:{page}",
                )
            ]
        )

    nav = []
    if page > 0:
        nav.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"orders_page:{page-1}")
        )
    if (page + 1) * PAGE_SIZE < total:
        nav.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"orders_page:{page+1}")
        )
    nav.append(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"orders_page:{page}")
    )
    kb.append(nav)

    return InlineKeyboardMarkup(inline_keyboard=kb)


def order_button_text(o: dict) -> str:
    dt = datetime.datetime.fromtimestamp(o["start_time"], TZ)
    date_str = dt.strftime("%d.%m %H:%M")
    people = f"üë• {o['places_taken']}/{o['places_total']}"
    desc = o.get("description", "")
    district = o.get("district", "")
    # —Ñ–æ—Ä–º–∞—Ç: –¥–∞—Ç–∞/–≤—Ä–µ–º—è | –ª—é–¥–∏ | –æ–ø–∏—Å–∞–Ω–∏–µ | —Ä–∞–π–æ–Ω
    return f"üóì {date_str} | {people} | {desc} | {district}"


def order_card_keyboard(order: dict, page: int):
    query = f"–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ {order['address']} {order['district']}"
    map_url = "https://yandex.ru/maps/?text=" + urllib.parse.quote(query)

    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ë–µ—Ä—É—Å—å", callback_data=f"take_order:{order['id']}:{page}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                    callback_data=f"skip_order:{order['id']}:{page}",
                )
            ],
            [InlineKeyboardButton(text="üó∫ –û—Ç–∫—Ä—ã—Ç—å –∞–¥—Ä–µ—Å –≤ –∫–∞—Ä—Ç–∞—Ö", url=map_url)],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ª–µ–Ω—Ç–µ", callback_data=f"orders_page:{page}"
                )
            ],
        ]
    )


def format_order_card(o: dict):
    dt = datetime.datetime.fromtimestamp(o["start_time"], TZ)
    start_str = dt.strftime("%d.%m %H:%M")

    if o["format"] == "hour":
        rate = "üí∞ 400 ‚ÇΩ/—á–∞—Å (–º–∏–Ω–∏–º—É–º 4 —á–∞—Å–∞)"
    elif o["format"] == "shift8":
        rate = "üí∞ 3500 ‚ÇΩ –∑–∞ 8 —á–∞—Å–æ–≤"
    else:
        rate = "üí∞ 4800 ‚ÇΩ –∑–∞ 12 —á–∞—Å–æ–≤"

    return (
        f"üìã <b>{o['description']}</b>\n\n"
        f"üìç –ê–¥—Ä–µ—Å: {o['address']} ({o['district']})\n"
        f"‚è∞ –°—Ç–∞—Ä—Ç: {start_str}\n"
        f"‚öôÔ∏è –§–æ—Ä–º–∞—Ç:{format_display(o['format'])}\n"
        f"üë• –ú–µ—Å—Ç–∞: {o['places_taken']}/{o['places_total']}\n"
        f"üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {o['citizenship_required']}\n"
        f"{rate}\n"
        f"‚ÑπÔ∏è –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {o.get('features','-')}"
    )


# ================= –•—ç–Ω–¥–ª–µ—Ä—ã =================
@router.message(F.text == "üì¶ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã")
async def show_orders(message: types.Message):
    page = 0
    orders, total = get_orders(message.from_user.id, page)
    if not orders:
        await message.answer("‚ùóÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return
    await message.answer(
        "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∑–∞–∫–∞–∑ üëá",
        reply_markup=orders_keyboard(orders, page, total),
    )


@router.callback_query(F.data.startswith("orders_page:"))
async def paginate_orders(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    orders, total = get_orders(callback.from_user.id, page)

    if not orders:
        await callback.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.", show_alert=True)
        return

    text = "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∑–∞–∫–∞–∑ üëá"
    kb = orders_keyboard(orders, page, total)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —á—Ç–æ-—Ç–æ —Ä–µ–∞–ª—å–Ω–æ
        if callback.message.text == text and callback.message.reply_markup == kb:
            await callback.answer("‚ö†Ô∏è –£–∂–µ —ç—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞", show_alert=False)
            return

        await callback.message.edit_text(text, reply_markup=kb)

    except TelegramBadRequest as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ¬´message is not modified¬ª
        if "message is not modified" in str(e):
            await callback.answer("‚ö†Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", show_alert=False)
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            raise


@router.callback_query(F.data.startswith("order_card:"))
async def show_order_card(callback: CallbackQuery):
    parts = callback.data.split(":")
    if len(parts) == 3:
        order_id, page = map(int, parts[1:])
    else:
        order_id = int(parts[1])
        page = 0  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        order = con.execute("SELECT * FROM orders WHERE id=?", (order_id,)).fetchone()

    if not order or order["status"] != "created":
        await callback.answer(
            "–ó–∞–∫–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω—ë–Ω. –û–±–Ω–æ–≤–∏—Ç–µ –ª–µ–Ω—Ç—É.", show_alert=True
        )
        return

    order = dict(order)  # –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∏ Row –≤ dict
    await callback.message.edit_text(
        format_order_card(order),
        reply_markup=order_card_keyboard(order, page),
        parse_mode="HTML",
    )


# === –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ===
@router.callback_query(F.data.startswith("skip_order:"))
async def skip_order(callback: CallbackQuery):
    _, order_id, page = callback.data.split(":")
    order_id, page = int(order_id), int(page)
    user_id = callback.from_user.id
    with sqlite3.connect(PATH_DATABASE) as con:
        con.execute(
            "INSERT INTO skipped_orders (worker_id, order_id, skipped_at) VALUES (?, ?, strftime('%s','now'))",
            (user_id, order_id),
        )
        con.commit()
    await callback.answer("üö´ –ó–∞–∫–∞–∑ —Å–∫—Ä—ã—Ç –Ω–∞ 48 —á–∞—Å–æ–≤.", show_alert=True)
    orders, total = get_orders(user_id, page)
    if orders:
        await callback.message.edit_text(
            "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∑–∞–∫–∞–∑ üëá",
            reply_markup=orders_keyboard(orders, page, total),
        )
    else:
        await callback.message.edit_text("‚ùóÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")


# === –ë–µ—Ä—É—Å—å ===
@router.callback_query(F.data.startswith("take_order:"))
async def take_order(callback: CallbackQuery, bot: Bot):
    parts = callback.data.split(":")
    if len(parts) == 3:
        _, order_id_str, page_str = parts
    elif len(parts) == 2:
        _, order_id_str = parts
        page_str = "0"  # –µ—Å–ª–∏ –≤ callback –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –±–µ—Ä—ë–º 0
    else:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    try:
        order_id = int(order_id_str)
        page = int(page_str)
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞.", show_alert=True)
        return

    user_id = callback.from_user.id

    # –ø–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ dict (–µ—Å–ª–∏ —ç—Ç–æ sqlite3.Row)
    worker = get_worker(user_id)
    if not worker:
        await callback.answer("‚ùóÔ∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        return
    if not isinstance(worker, dict):
        worker = dict(worker)

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        cur = con.cursor()

        order = cur.execute("SELECT * FROM orders WHERE id=?", (order_id,)).fetchone()
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        order = dict(order)

        # –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if order["status"] != "created":
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω—ë–Ω.", show_alert=True)
            return
        if order["places_taken"] >= order["places_total"]:
            await callback.answer(
                "‚ùå –ú–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –∑–∞–∫–∞–∑—ã –≤ –º–µ–Ω—é ‚Äúüì¶ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã‚Äù.",
                show_alert=True,
            )
            return

        # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ ===
        worker_cit = worker.get("citizenship")
        order_cit = order.get("citizenship_required")

        # –ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü –º–æ–∂–µ—Ç –±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü" –∏ "–õ—é–±–æ–µ"
        if worker_cit == "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü" and order_cit not in ("–ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü", "–õ—é–±–æ–µ"):
            await callback.answer(
                "‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≥—Ä–∞–∂–¥–∞–Ω–∞–º –†–§.", show_alert=True
            )
            return
        # –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–§ –º–æ–∂–µ—Ç –±—Ä–∞—Ç—å –ª—é–±—ã–µ –∑–∞–∫–∞–∑—ã ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

        # –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        already = cur.execute(
            "SELECT id FROM shifts WHERE worker_id=? AND order_id=? AND status IN ('accepted','arrived')",
            (worker["id"], order_id),
        ).fetchone()
        if already:
            await callback.answer(
                "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ‚ÄúüìÖ –ú–æ–∏ —Å–º–µ–Ω—ã‚Äù.\n"
                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è, –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É —Å–º–µ–Ω—ã –∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äú‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è‚Äù (—É—á—Ç–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞).",
                show_alert=True,
            )
            return

        # –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if has_time_conflict(worker["id"], order["start_time"], order["format"]):
            await callback.answer(
                "‚ùå –≠—Ç–∞ —Å–º–µ–Ω–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ–π. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥—Ä—É–≥—É—é –∑–∞–ø–∏—Å—å.",
                show_alert=True,
            )
            return

        # –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ / –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        blocked_until = worker.get("blocked_until")
        if blocked_until:
            try:
                if int(blocked_until) > int(datetime.datetime.now(TZ).timestamp()):
                    await callback.answer(
                        "‚õîÔ∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        show_alert=True,
                    )
                    return
            except Exception:
                # –µ—Å–ª–∏ –≤ –ë–î –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –Ω–µ –ø–∞–¥–∞–µ–º
                pass

        # –≤—Å–µ –æ–∫ ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º X/Y (–∞—Ç–æ–º–∞—Ä–Ω–æ)
        cur.execute(
            "INSERT INTO shifts (order_id, worker_id, status, start_time) VALUES (?, ?, 'accepted', ?)",
            (order_id, worker["id"], order["start_time"]),
        )
        cur.execute(
            "UPDATE orders SET places_taken = places_taken + 1 WHERE id=?",
            (order_id,),
        )
        con.commit()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.answer(
        "‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –∑–∞ 2 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã.",
        show_alert=True,
    )

    # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π X/Y –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        fresh = con.execute("SELECT * FROM orders WHERE id=?", (order_id,)).fetchone()

    if fresh:
        fresh = dict(fresh)
        await callback.message.edit_text(
            format_order_card(fresh),
            reply_markup=order_card_keyboard(fresh, page),
            parse_mode="HTML",
        )
