# -*- coding: utf-8 -*-
import sqlite3
import datetime as dt
from aiogram import Router, F
from aiogram.types import CallbackQuery

from tgbot.data.config import PATH_DATABASE, get_admins

router = Router()


# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ =====
def _now_ts() -> int:
    return int(dt.datetime.now().timestamp())


async def _notify_admins(bot, text: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º"""
    for admin_id in get_admins():
        try:
            await bot.send_message(admin_id, text)
        except:
            pass


# ===== üìç –Ø –Ω–∞ –º–µ—Å—Ç–µ =====
@router.callback_query(F.data.startswith("shift_arrive:"))
async def shift_arrive(callback: CallbackQuery, bot):
    shift_id = int(callback.data.split(":")[1])
    now = _now_ts()

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        cur = con.cursor()
        s = cur.execute("SELECT * FROM shifts WHERE id=?", (shift_id,)).fetchone()
        if not s:
            await callback.answer("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        if s["status"] != "accepted":
            await callback.answer("‚ùóÔ∏è –£–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ.", show_alert=True)
            return

        # –æ–±–Ω–æ–≤–ª—è–µ–º
        cur.execute(
            "UPDATE shifts SET status='arrived', arrived_at=? WHERE id=?",
            (now, shift_id),
        )

        # –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –ø—Ä–∏–±—ã–ª ‚Äî –∑–∞–∫–∞–∑ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è started
        first = cur.execute(
            "SELECT 1 FROM shifts WHERE order_id=? AND status='arrived' LIMIT 1",
            (s["order_id"],),
        ).fetchone()
        if not first:
            cur.execute(
                "UPDATE orders SET status='started' WHERE id=?", (s["order_id"],)
            )
        con.commit()

    await callback.answer("üìç –ü—Ä–∏–±—ã—Ç–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ!", show_alert=True)
    await callback.message.edit_text(
        "‚úÖ –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –ø—Ä–∏–±—ã—Ç–∏–µ.\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å ¬´–û—Ç—Ä–∞–±–æ—Ç–∞–ª¬ª –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏."
    )

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    await _notify_admins(
        bot,
        f"üë∑ –†–∞–±–æ—Ç–Ω–∏–∫ #{s['worker_id']} –ø—Ä–∏–±—ã–ª –Ω–∞ —Å–º–µ–Ω—É (shift_id={shift_id}, order_id={s['order_id']})",
    )


# ===== ‚úÖ –û—Ç—Ä–∞–±–æ—Ç–∞–ª =====
@router.callback_query(F.data.startswith("shift_done:"))
async def shift_done(callback: CallbackQuery, bot):
    shift_id = int(callback.data.split(":")[1])
    now = _now_ts()

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        cur = con.cursor()
        s = cur.execute(
            "SELECT s.*, o.format, o.start_time, o.id as order_id "
            "FROM shifts s JOIN orders o ON s.order_id=o.id WHERE s.id=?",
            (shift_id,),
        ).fetchone()
        if not s:
            await callback.answer("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        if s["status"] not in ("arrived", "accepted"):
            await callback.answer("–≠—Ç–∞ —Å–º–µ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
            return

        start = s["arrived_at"] or s["start_time"]

        if s["format"] == "hour":
            hours = max(4, (now - start + 3599) // 3600)
            amount = hours * 400
        elif s["format"] == "shift8":
            amount = 3500
        else:
            amount = 4800

        cur.execute(
            "UPDATE shifts SET status='done', finished_at=?, amount=? WHERE id=?",
            (now, amount, shift_id),
        )
        cur.execute(
            "UPDATE workers SET balance = balance + ? WHERE id=?",
            (amount, s["worker_id"]),
        )
        cur.execute("UPDATE orders SET status='done' WHERE id=?", (s["order_id"],))
        con.commit()

    await callback.answer("‚úÖ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
    await callback.message.edit_text(
        f"‚úÖ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ. –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} ‚ÇΩ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ üí∞ –ë–∞–ª–∞–Ω—Å."
    )

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    await _notify_admins(
        bot,
        f"‚úÖ –†–∞–±–æ—Ç–Ω–∏–∫ #{s['worker_id']} –∑–∞–≤–µ—Ä—à–∏–ª —Å–º–µ–Ω—É. –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} ‚ÇΩ (shift_id={shift_id}, order_id={s['order_id']})",
    )


# ===== ‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è =====
@router.callback_query(F.data.startswith("shift_cancel:"))
async def shift_cancel(callback: CallbackQuery, bot):
    shift_id = int(callback.data.split(":")[1])
    now = _now_ts()

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        cur = con.cursor()
        s = cur.execute(
            "SELECT s.*, o.start_time, o.places_taken FROM shifts s JOIN orders o ON s.order_id=o.id WHERE s.id=?",
            (shift_id,),
        ).fetchone()
        if not s:
            await callback.answer("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        if s["status"] != "accepted":
            await callback.answer("‚ùóÔ∏è –£–∂–µ –Ω–µ–ª—å–∑—è –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è.", show_alert=True)
            return

        delta = s["start_time"] - now
        penalty = 0.0

        if delta > 2 * 3600:
            penalty = -0.1
            msg = "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–º–µ–Ω—ã. –†–µ–π—Ç–∏–Ω–≥ —Å–Ω–∏–∂–µ–Ω –Ω–∞ 0.1."
        elif delta > 0:
            penalty = -0.5
            msg = "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –ø–æ–∑–¥–Ω–æ. –†–µ–π—Ç–∏–Ω–≥ —Å–Ω–∏–∂–µ–Ω –Ω–∞ 0.5. –í–æ–∑–º–æ–∂–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è."
        else:
            await callback.answer("–ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –Ω–µ–ª—å–∑—è.", show_alert=True)
            return

        cur.execute("UPDATE shifts SET status='cancelled' WHERE id=?", (shift_id,))
        cur.execute(
            "UPDATE workers SET rating = rating + ? WHERE id=?",
            (penalty, s["worker_id"]),
        )
        cur.execute(
            "UPDATE orders SET places_taken = places_taken - 1 WHERE id=?",
            (s["order_id"],),
        )
        con.commit()

    await callback.answer("‚ùå –û—Ç–∫–∞–∑ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
    await callback.message.edit_text(msg)

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    await _notify_admins(
        bot,
        f"‚ö†Ô∏è –†–∞–±–æ—Ç–Ω–∏–∫ #{s['worker_id']} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Å–º–µ–Ω—ã (shift_id={shift_id}, order_id={s['order_id']}, penalty={penalty})",
    )
