# -*- coding: utf-8 -*-
import sqlite3
import datetime as dt
from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from tgbot.data.config import PATH_DATABASE, get_admins
from tgbot.services.tz import TZ
from tgbot.utils.misc.bot_filters import IsAdmin

router = Router()
router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())

PAGE_SIZE = 10


# ====================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ======================


def _citizenship_display(w: dict) -> str:
    """–ö—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –∏ —Å—Ç—Ä–∞–Ω—É"""
    if w.get("citizenship") == "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü" and w.get("country"):
        return f"üåç –ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü ({w['country']})"
    elif w.get("citizenship") == "–†–§":
        return "üá∑üá∫ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–§"
    return w.get("citizenship", "-")


def _status_display(w: dict) -> str:
    return "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if w.get("status") == "active" else "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"


def _count_shifts(con: sqlite3.Connection, worker_id: int) -> int:
    """–ü–æ–¥—Å—á—ë—Ç –≤—Å–µ—Ö —Å–º–µ–Ω —Ä–∞–±–æ—Ç–Ω–∏–∫–∞"""
    return con.execute(
        "SELECT COUNT(*) FROM shifts WHERE worker_id=?", (worker_id,)
    ).fetchone()[0]


def _get_recent_shifts(worker_id: int, limit: int = 5):
    """–ü–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–º–µ–Ω"""
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        rows = con.execute(
            """
            SELECT s.id AS shift_id, o.description, o.start_time, o.format, s.status
            FROM shifts s
            JOIN orders o ON o.id = s.order_id
            WHERE s.worker_id=?
            ORDER BY o.start_time DESC
            LIMIT ?
            """,
            (worker_id, limit),
        ).fetchall()
    return [dict(r) for r in rows]


def _format_shift_row(s: dict) -> str:
    """–§–æ—Ä–º–∞—Ç –æ–¥–Ω–æ–π —Å–º–µ–Ω—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"""
    start = dt.datetime.fromtimestamp(s["start_time"], TZ).strftime("%d.%m %H:%M")
    status_ru = {
        "accepted": "–ø—Ä–∏–Ω—è–ª —É—á–∞—Å—Ç–∏–µ",
        "arrived": "–ø—Ä–∏–±—ã–ª",
        "done": "–∑–∞–≤–µ—Ä—à–∏–ª",
        "no_show": "–Ω–µ —è–≤–∏–ª—Å—è",
        "cancelled": "–æ—Ç–º–µ–Ω—ë–Ω",
    }.get(s["status"], s["status"])

    if s["format"] == "hour":
        rate = "400 ‚ÇΩ/—á–∞—Å"
    elif s["format"] == "shift8":
        rate = "3500 ‚ÇΩ (8—á)"
    else:
        rate = "4800 ‚ÇΩ (12—á)"

    return (
        f"üìÖ {start} ‚Äî {s['description']}\nüß© {s['format']} | üí∞ {rate} | {status_ru}"
    )


# ====================== –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ ======================


@router.message(F.text == "üë∑ –†–∞–±–æ—á–∏–µ")
async def show_workers(message: types.Message):
    """–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏), –±–µ–∑ –∞–¥–º–∏–Ω–æ–≤."""
    page = 0
    offset = page * PAGE_SIZE
    admin_ids = set(get_admins())  # —á–∏—Ç–∞–µ–º –∏–∑ settings.ini

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row

        where_sql = "WHERE 1=1"
        params: list = []
        if admin_ids:
            placeholders = ",".join("?" * len(admin_ids))
            where_sql += f" AND telegram_id NOT IN ({placeholders})"
            params.extend(list(admin_ids))

        rows = con.execute(
            f"SELECT * FROM workers {where_sql} ORDER BY id DESC LIMIT ? OFFSET ?",
            (*params, PAGE_SIZE, offset),
        ).fetchall()

        total = con.execute(
            f"SELECT COUNT(*) FROM workers {where_sql}",
            params,
        ).fetchone()[0]

    if not rows:
        await message.answer(
            "‚ùóÔ∏è –í –±–∞–∑–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤)."
        )
        return

    kb_rows = []
    for r in rows:
        w = dict(r)
        title = f"{w['name']} | {w['phone']} | {_citizenship_display(w)}"
        kb_rows.append(
            [
                InlineKeyboardButton(
                    text=title,
                    callback_data=f"admin_worker_info:{w['id']}:{page}",
                )
            ]
        )

    nav = []
    if (page + 1) * PAGE_SIZE < total:
        nav.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"admin_workers_page:{page+1}"
            )
        )
    if page > 0:
        nav.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_workers_page:{page-1}"
            )
        )
    if nav:
        kb_rows.append(nav)

    await message.answer(
        "üë∑ <b>–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤</b>\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows),
        parse_mode="HTML",
    )


# ====================== –ü–∞–≥–∏–Ω–∞—Ü–∏—è ======================


@router.callback_query(F.data.startswith("admin_workers_page:"))
async def paginate_workers(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    admin_ids = set(get_admins())

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        where_sql = "WHERE 1=1"
        params: list = []
        if admin_ids:
            placeholders = ",".join("?" * len(admin_ids))
            where_sql += f" AND telegram_id NOT IN ({placeholders})"
            params.extend(list(admin_ids))

        rows = con.execute(
            f"SELECT * FROM workers {where_sql} ORDER BY id DESC LIMIT ? OFFSET ?",
            (*params, PAGE_SIZE, page * PAGE_SIZE),
        ).fetchall()

        total = con.execute(
            f"SELECT COUNT(*) FROM workers {where_sql}", params
        ).fetchone()[0]

    if not rows:
        await callback.answer("–ù–µ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.", show_alert=True)
        return

    kb_rows = []
    for w in rows:
        w = dict(w)
        text = f"{w['name']} | {w['phone']} | {_citizenship_display(w)}"
        kb_rows.append(
            [
                InlineKeyboardButton(
                    text=text,
                    callback_data=f"admin_worker_info:{w['id']}:{page}",
                )
            ]
        )

    nav = []
    if (page + 1) * PAGE_SIZE < total:
        nav.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"admin_workers_page:{page+1}"
            )
        )
    if page > 0:
        nav.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_workers_page:{page-1}"
            )
        )
    if nav:
        kb_rows.append(nav)

    await callback.message.edit_text(
        "üë∑ <b>–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤</b>\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows),
        parse_mode="HTML",
    )
    await callback.answer()


# ====================== –ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ ======================


@router.callback_query(F.data.startswith("admin_worker_info:"))
async def show_worker_card(callback: CallbackQuery):
    _, worker_id, page = callback.data.split(":")
    worker_id = int(worker_id)
    page = int(page)

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        w = con.execute("SELECT * FROM workers WHERE id=?", (worker_id,)).fetchone()
        if not w:
            await callback.answer("–†–∞–±–æ—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        w = dict(w)
        total_shifts = _count_shifts(con, worker_id)

    created = w.get("created_at")
    if created:
        date_str = dt.datetime.fromtimestamp(int(created), TZ).strftime("%d.%m.%Y %H:%M")
    else:
        date_str = "-"

    text = (
        f"üë§ <b>{w['name']}</b> (ID: {w['id']})\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>{w['phone']}</code>\n"
        f"üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {_citizenship_display(w)}\n"
        f"üèô –†–∞–π–æ–Ω: {w.get('district', '-')}\n"
        f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {w.get('rating', 0):.1f}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {_status_display(w)}\n"
        f"üóì –í—Å–µ–≥–æ —Å–º–µ–Ω: {total_shifts}\n"
        f"üë• Telegram: @{w.get('telegram_login', '-')}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {date_str}"
    )

    is_blocked = w.get("status") == "blocked"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìä –ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω",
                    callback_data=f"admin_worker_history:{w['id']}:{page}",
                )
            ],
            [
                InlineKeyboardButton(
                    text=("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if is_blocked else "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"),
                    callback_data=f"admin_worker_toggle:{w['id']}:{page}",
                )
            ],
            [
                InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—á–µ–≥–æ",
                    callback_data=f"admin_worker_delete_confirm:{w['id']}:{page}",
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                    callback_data=f"admin_workers_page:{page}",
                )
            ],
        ]
    )

    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()


# ====================== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è ======================


@router.callback_query(F.data.startswith("admin_worker_delete_confirm:"))
async def confirm_delete_worker(callback: CallbackQuery):
    _, worker_id, page = callback.data.split(":")
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                    callback_data=f"admin_worker_delete_yes:{worker_id}:{page}",
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞",
                    callback_data=f"admin_worker_info:{worker_id}:{page}",
                )
            ],
        ]
    )
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ ID {worker_id}? "
        f"–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
        reply_markup=kb,
    )
    await callback.answer()


# ====================== –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ ======================


@router.callback_query(F.data.startswith("admin_worker_delete_yes:"))
async def delete_worker(callback: CallbackQuery):
    _, worker_id, page = callback.data.split(":")
    worker_id = int(worker_id)

    with sqlite3.connect(PATH_DATABASE) as con:
        cur = con.cursor()
        cur.execute("DELETE FROM transactions WHERE worker_id=?", (worker_id,))
        cur.execute("DELETE FROM shifts WHERE worker_id=?", (worker_id,))
        cur.execute("DELETE FROM skipped_orders WHERE worker_id=?", (worker_id,))
        cur.execute("DELETE FROM workers WHERE id=?", (worker_id,))
        con.commit()

    await callback.message.edit_text(f"üóë –†–∞–±–æ—Ç–Ω–∏–∫ ID {worker_id} —É–¥–∞–ª—ë–Ω.")
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ.")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
    await paginate_workers(
        types.CallbackQuery(
            id=callback.id,
            from_user=callback.from_user,
            message=callback.message,
            data=f"admin_workers_page:{page}",
        )
    )


# ====================== –ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω ======================


@router.callback_query(F.data.startswith("admin_worker_history:"))
async def show_worker_history(callback: CallbackQuery):
    _, worker_id, page = callback.data.split(":")
    worker_id = int(worker_id)

    shifts = _get_recent_shifts(worker_id)
    if not shifts:
        text = "‚ùóÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–º–µ–Ω."
    else:
        text = "üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–º–µ–Ω:</b>\n\n"
        text += "\n\n".join(_format_shift_row(s) for s in shifts)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"admin_worker_info:{worker_id}:{page}",
                )
            ]
        ]
    )

    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()


# ====================== –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ ======================


@router.callback_query(F.data.startswith("admin_worker_toggle:"))
async def toggle_worker_status(callback: CallbackQuery):
    _, worker_id, page = callback.data.split(":")
    worker_id = int(worker_id)
    page = int(page)

    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        w = con.execute(
            "SELECT id, status FROM workers WHERE id=?", (worker_id,)
        ).fetchone()
        if not w:
            await callback.answer("–†–∞–±–æ—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        w = dict(w)
        new_status = "active" if w["status"] == "blocked" else "blocked"
        con.execute("UPDATE workers SET status=? WHERE id=?", (new_status, worker_id))
        con.commit()

    msg = (
        "‚úÖ –†–∞–±–æ—Ç–Ω–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
        if new_status == "active"
        else "üö´ –†–∞–±–æ—Ç–Ω–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
    )
    await callback.answer(msg, show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    await show_worker_card(
        types.CallbackQuery(
            id=callback.id,
            from_user=callback.from_user,
            message=callback.message,
            data=f"admin_worker_info:{worker_id}:{page}",
        )
    )
