# -*- coding: utf-8 -*-
import sqlite3
from aiogram import Router, F, types
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import StateFilter
from aiogram.fsm.state import StatesGroup, State

from tgbot.data.config import PATH_DATABASE, get_admins
from tgbot.routers.admin_panel import admin_menu
from tgbot.utils.misc.bot_models import FSM


router = Router()


# ================= FSM –°–æ—Å—Ç–æ—è–Ω–∏—è =================
class Onboarding(StatesGroup):
    get_phone = State()
    get_name = State()
    get_city = State()
    get_district = State()
    get_citizenship = State()
    get_country = State()
    finish_registration = State()


# ================= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ =================
def save_worker_data(user_id: int, field: str, value):
    with sqlite3.connect(PATH_DATABASE) as con:
        con.execute(
            f"UPDATE workers SET {field} = ? WHERE telegram_id = ?", (value, user_id)
        )
        con.commit()


def ensure_worker_record(user_id: int) -> None:
    """–°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç (–∏–º—è –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)."""
    with sqlite3.connect(PATH_DATABASE) as con:
        con.execute(
            """
            INSERT OR IGNORE INTO workers 
            (telegram_id, name, phone, city, district, citizenship, created_at)
            VALUES (?, '', '', '', '', '', strftime('%s','now'))
            """,
            (user_id,),
        )
        con.commit()


def is_registered(user_id: int) -> bool:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∏–º—è."""
    with sqlite3.connect(PATH_DATABASE) as con:
        con.row_factory = sqlite3.Row
        row = con.execute(
            "SELECT phone, name FROM workers WHERE telegram_id = ?",
            (user_id,),
        ).fetchone()
        if row is None:
            return False
        phone, name = row["phone"], row["name"]
        return bool(phone and str(phone).strip()) and bool(name and str(name).strip())


def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¶ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã")],
            [KeyboardButton(text="üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã")],
            [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],
        ],
        resize_keyboard=True,
    )


def policy_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree_policy")],
            [
                InlineKeyboardButton(
                    text="üìñ –ü—Ä–∞–≤–∏–ª–∞",
                    url="https://telegra.ph/Pravila-servisa--RabotayBro-10-10",
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                    url="https://telegra.ph/Politika-konfidencialnosti-10-10-37",
                )
            ],
        ]
    )


# ================= –•—ç–Ω–¥–ª–µ—Ä—ã =================
# === 1. START ===
@router.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSM):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω ‚Äî —Å—Ä–∞–∑—É –∫–∏–¥–∞–µ–º –≤ –∞–¥–º–∏–Ω–∫—É
    if user_id in get_admins():
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_menu()
        )
        return

    # –°–æ–∑–¥–∞—ë–º ¬´—á–µ—Ä–Ω–æ–≤–∏–∫¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ensure_worker_record(user_id)

    # –ï—Å–ª–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if is_registered(user_id):
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        await state.clear()
        return

    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await message.answer(
        "–ù—É –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π –ë—Ä–∞—Ç! RabotayBro ‚Äî —ç—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏ –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ. "
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=kb,
    )

    await state.set_state(Onboarding.get_phone)


# === 2. –¢–µ–ª–µ—Ñ–æ–Ω ===
@router.message(StateFilter(Onboarding.get_phone), F.contact)
async def get_phone(message: types.Message, state: FSM):
    phone = message.contact.phone_number
    save_worker_data(message.from_user.id, "phone", phone)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è (2‚Äì40 —Å–∏–º–≤–æ–ª–æ–≤).", reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Onboarding.get_name)


@router.message(StateFilter(Onboarding.get_phone))
async def invalid_phone(message: types.Message):
    await message.answer("–ù—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä. –ù–∞–∂–º–∏—Ç–µ ‚Äúüì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä‚Äù.")
    return


# === 3. –ò–º—è ===
@router.message(StateFilter(Onboarding.get_name))
async def get_name(message: types.Message, state: FSM):
    name = message.text.strip()
    if not (2 <= len(name) <= 40) or name.isdigit():
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∏–º—è (2‚Äì40 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    save_worker_data(
        message.from_user.id, "name", name
    )  # <- —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä—É—á–Ω—É—é –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∏–º—è

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥")]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", reply_markup=kb)
    await state.set_state(Onboarding.get_city)


# === 4. –ì–æ—Ä–æ–¥ ===
@router.message(StateFilter(Onboarding.get_city), F.text == "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥")
async def get_city(message: types.Message, state: FSM):
    save_worker_data(message.from_user.id, "city", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥")

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π"),
                KeyboardButton(text="–í–µ—Ä—Ö-–ò—Å–µ—Ç—Å–∫–∏–π"),
            ],
            [KeyboardButton(text="–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π"), KeyboardButton(text="–ö–∏—Ä–æ–≤—Å–∫–∏–π")],
            [KeyboardButton(text="–õ–µ–Ω–∏–Ω—Å–∫–∏–π"), KeyboardButton(text="–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π")],
            [
                KeyboardButton(text="–û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ–≤—Å–∫–∏–π"),
                KeyboardButton(text="–ß–∫–∞–ª–æ–≤—Å–∫–∏–π"),
            ],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω:", reply_markup=kb)
    await state.set_state(Onboarding.get_district)


# === 5. –†–∞–π–æ–Ω ===
@router.message(StateFilter(Onboarding.get_district))
async def get_district(message: types.Message, state: FSM):
    district = message.text.strip()
    valid_districts = [
        "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π",
        "–í–µ—Ä—Ö-–ò—Å–µ—Ç—Å–∫–∏–π",
        "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π",
        "–ö–∏—Ä–æ–≤—Å–∫–∏–π",
        "–õ–µ–Ω–∏–Ω—Å–∫–∏–π",
        "–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π",
        "–û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ–≤—Å–∫–∏–π",
        "–ß–∫–∞–ª–æ–≤—Å–∫–∏–π",
    ]
    if district not in valid_districts:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫.")
        return

    save_worker_data(message.from_user.id, "district", district)

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–§"), KeyboardButton(text="–ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:", reply_markup=kb)
    await state.set_state(Onboarding.get_citizenship)


# === 6. –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ ===
@router.message(StateFilter(Onboarding.get_citizenship), F.text == "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–§")
async def citizen_rf(message: types.Message, state: FSM):
    save_worker_data(message.from_user.id, "citizenship", "–†–§")
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤–ª—è—è –¥–∞–Ω–Ω—ã–µ, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ü—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.",
        reply_markup=policy_keyboard(),
        disable_web_page_preview=True,
    )


@router.message(StateFilter(Onboarding.get_citizenship), F.text == "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü")
async def citizen_foreign(message: types.Message, state: FSM):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"), KeyboardButton(text="–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω")],
            [KeyboardButton(text="–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω"), KeyboardButton(text="–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω")],
            [KeyboardButton(text="–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω"), KeyboardButton(text="–ê—Ä–º–µ–Ω–∏—è")],
            [KeyboardButton(text="–ë–µ–ª–∞—Ä—É—Å—å"), KeyboardButton(text="–î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=kb)
    await state.set_state(Onboarding.get_country)


# === 6.1 –°—Ç—Ä–∞–Ω–∞ –¥–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤ ===
@router.message(StateFilter(Onboarding.get_country))
async def get_country(message: types.Message, state: FSM):
    save_worker_data(message.from_user.id, "citizenship", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü")
    save_worker_data(message.from_user.id, "country", message.text.strip())
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤–ª—è—è –¥–∞–Ω–Ω—ã–µ, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ü—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.",
        reply_markup=policy_keyboard(),
        disable_web_page_preview=True,
    )


# === 7. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ===
@router.callback_query(F.data == "agree_policy")
async def agree_and_finish(callback: types.CallbackQuery, state: FSM):
    text = (
        "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RabotayBro. ‚úÖ\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞:\n"
        "- –ü–æ—á–∞—Å–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ (–º–∏–Ω–∏–º—É–º 4 —á–∞—Å–∞): 400 ‚ÇΩ/—á–∞—Å\n"
        "- –°–º–µ–Ω–∞ (8 —á–∞—Å–æ–≤): 3500 ‚ÇΩ\n"
        "- –ü–æ–ª–Ω—ã–π –¥–µ–Ω—å (12 —á–∞—Å–æ–≤): 4800 ‚ÇΩ\n\n"
        "–ó–∞–≥–ª—è–Ω–∏ –≤ ¬´üì¶ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã¬ª ‚Äî –µ—Å–ª–∏ –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å!"
    )

    await callback.answer()

    # —Å–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ä—É—é inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–µ—Å–ª–∏ –±—ã–ª–∞)
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ReplyKeyboardMarkup –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await callback.message.answer(text, reply_markup=main_menu())

    await state.clear()
